<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Wolf</title>
  
  <subtitle>coding</subtitle>
  <link href="http://wang_zhe343621.gitee.io/atom.xml" rel="self"/>
  
  <link href="http://wang_zhe343621.gitee.io/"/>
  <updated>2023-04-04T04:47:14.078Z</updated>
  <id>http://wang_zhe343621.gitee.io/</id>
  
  <author>
    <name>Code Wolf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vscode加载web视图，图片报错</title>
    <link href="http://wang_zhe343621.gitee.io/2023/04/04/vscode%E5%8A%A0%E8%BD%BDweb%E8%A7%86%E5%9B%BE%EF%BC%8C%E5%9B%BE%E7%89%87%E6%8A%A5%E9%94%99/"/>
    <id>http://wang_zhe343621.gitee.io/2023/04/04/vscode%E5%8A%A0%E8%BD%BDweb%E8%A7%86%E5%9B%BE%EF%BC%8C%E5%9B%BE%E7%89%87%E6%8A%A5%E9%94%99/</id>
    <published>2023-04-04T04:06:20.000Z</published>
    <updated>2023-04-04T04:47:14.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode加载web-视图，报错-“Error-Could-not-register-serviceworkers-InvalidstateError-Failed-to-regist“"><a href="#vscode加载web-视图，报错-“Error-Could-not-register-serviceworkers-InvalidstateError-Failed-to-regist“" class="headerlink" title="vscode加载web 视图，报错:“Error: Could not register serviceworkers: InvalidstateError: Failed to regist“"></a>vscode加载web 视图，报错:“Error: Could not register serviceworkers: InvalidstateError: Failed to regist“</h1><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><ol><li>关闭vscode</li><li><code>win+r</code> 打开cmd<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code --no-sandbox</span><br></pre></td></tr></table></figure>会重启vscode，就可以查看了</li></ol><h2 id="引用文献"><a href="#引用文献" class="headerlink" title="引用文献"></a>引用文献</h2><p>[1] <a href="https://blog.csdn.net/m0_58724783/article/details/127879777?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-5-127879777-blog-125405459.235%5Ev27%5Epc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-5-127879777-blog-125405459.235%5Ev27%5Epc_relevant_multi_platform_whitelistv3&utm_relevant_index=5">vscode加载web 视图</a></p>]]></content>
    
    
    <summary type="html">vscode 不能查看图片</summary>
    
    
    
    <category term="problem" scheme="http://wang_zhe343621.gitee.io/categories/problem/"/>
    
    <category term="software" scheme="http://wang_zhe343621.gitee.io/categories/problem/software/"/>
    
    <category term="vscode" scheme="http://wang_zhe343621.gitee.io/categories/problem/software/vscode/"/>
    
    
    <category term="vscode" scheme="http://wang_zhe343621.gitee.io/tags/vscode/"/>
    
    <category term="problem" scheme="http://wang_zhe343621.gitee.io/tags/problem/"/>
    
  </entry>
  
  <entry>
    <title>centos7 安装runlike(docker查看容器启动命令)</title>
    <link href="http://wang_zhe343621.gitee.io/2023/04/02/centos7-%E5%AE%89%E8%A3%85runlike-docker%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://wang_zhe343621.gitee.io/2023/04/02/centos7-%E5%AE%89%E8%A3%85runlike-docker%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-04-02T10:45:19.000Z</published>
    <updated>2023-04-02T18:51:30.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7-安装runlike"><a href="#centos7-安装runlike" class="headerlink" title="centos7 安装runlike"></a>centos7 安装runlike</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>centos7 | python2.7 | Docker version 20.10.17</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>yum -y install epel-release</li><li>yum install -y python-pip</li><li>pip install runlike 这一步报错:<br><img src="/.io//pip-install-upgrade%E5%91%BD%E4%BB%A4.png" alt="pip install runlike报错"><br>根据提示运行命令 pip install –upgrade pip  无效，还是报错</li></ol><p><strong><font size="4">解决方法</font></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line">pip install runlike</span><br></pre></td></tr></table></figure><h2 id="引用文献"><a href="#引用文献" class="headerlink" title="引用文献"></a>引用文献</h2><p>[1] <a href="https://www.dianjilingqu.com/177835.html">Centos7-安装runlike用来查看docker容器启动时候的参数</a></p>]]></content>
    
    
    <summary type="html">centos7 安装runlike(docker查看容器启动命令)</summary>
    
    
    
    <category term="install" scheme="http://wang_zhe343621.gitee.io/categories/install/"/>
    
    <category term="centos" scheme="http://wang_zhe343621.gitee.io/categories/install/centos/"/>
    
    <category term="install" scheme="http://wang_zhe343621.gitee.io/categories/install/centos/install/"/>
    
    
    <category term="centos7" scheme="http://wang_zhe343621.gitee.io/tags/centos7/"/>
    
    <category term="runlike" scheme="http://wang_zhe343621.gitee.io/tags/runlike/"/>
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker 常用命令使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2023/04/02/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2023/04/02/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2023-04-02T10:09:27.000Z</published>
    <updated>2023-04-02T18:54:49.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h1><ol><li><p>修改docker启动配置命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改nginx跟随系统重启</span></span><br><span class="line">docker update --restart=always nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">docker container update --restart=always nginx</span><br></pre></td></tr></table></figure></li><li><p>修改容器名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename [old(id or name)] [new name]</span><br></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [docker id or name] /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>退出容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> <span class="comment"># exit 退出 如果容器没有-d 后台运行，会直接关闭容器</span></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">ctrl + p + q <span class="comment"># 退出容器(-d 不影响)</span></span><br></pre></td></tr></table></figure></li><li><p>查看容器详情(不能重现启动命令)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect [docker id or name]</span><br></pre></td></tr></table></figure></li><li><p>查看容器的启动命令(runlike)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 python -&gt; pip -&gt; runlike</span></span><br><span class="line">runlike -p [docker id or name]</span><br><span class="line">...待写</span><br></pre></td></tr></table></figure><p><img src="/.io//docker-runlike-example.png" alt="runlike-example-result"></p></li><li><p>修改容器映射端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#temp </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="引用文献"><a href="#引用文献" class="headerlink" title="引用文献"></a>引用文献</h2><p>[1] <a href="https://liucy.blog.csdn.net/article/details/124511738?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-124511738-blog-122253638.235%5Ev27%5Epc_relevant_default_base1&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-124511738-blog-122253638.235%5Ev27%5Epc_relevant_default_base1&utm_relevant_index=1">docker修改容器的端口、容器名、映射地址</a></p>]]></content>
    
    
    <summary type="html">docker 常用命令</summary>
    
    
    
    <category term="command" scheme="http://wang_zhe343621.gitee.io/categories/command/"/>
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/categories/command/docker/"/>
    
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/tags/docker/"/>
    
    <category term="command" scheme="http://wang_zhe343621.gitee.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>docker-nginx安装</title>
    <link href="http://wang_zhe343621.gitee.io/2023/04/02/docker-nginx%E5%AE%89%E8%A3%85/"/>
    <id>http://wang_zhe343621.gitee.io/2023/04/02/docker-nginx%E5%AE%89%E8%A3%85/</id>
    <published>2023-04-02T09:30:23.000Z</published>
    <updated>2023-04-02T18:51:30.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker下安装nginx"><a href="#docker下安装nginx" class="headerlink" title="docker下安装nginx"></a>docker下安装nginx</h1><ol><li>下载镜像<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure></li><li>创建挂载卷<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/nginx/conf</span><br><span class="line">mkdir -p /data/nginx/<span class="built_in">log</span></span><br><span class="line">mkdir -p /data/nginx/html</span><br></pre></td></tr></table></figure></li><li>启动临时nginx容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-temp -p 80:80 -d nginx</span><br><span class="line"><span class="comment">#停止删除</span></span><br><span class="line">docker stop nginx-temp</span><br><span class="line">docker rm nginx-temp</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li><li>复制docker容器中的配置文件到宿主机上<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp nginx-temp:/etc/nginx/nginx.conf /data/nginx/conf/nginx.conf</span><br><span class="line">docker cp nginx-temp:/etc/nginx/conf.d /data/nginx/conf/conf.d</span><br><span class="line">docker cp nginx-temp:/usr/share/nginx/html /data/nginx/</span><br></pre></td></tr></table></figure></li><li>启动nginx容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 80:80 \</span><br><span class="line">--name nginx \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /data/nginx/conf/conf.d:/etc/nginx/conf.d \</span><br><span class="line">-v /data/nginx/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/nginx \</span><br><span class="line">-v /data/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-d nginx:latest</span><br></pre></td></tr></table></figure></li><li>修改容器启动配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置nginx自动启动</span></span><br><span class="line">docker update --restart=always nginx </span><br></pre></td></tr></table></figure></li><li>查看nginx 启动命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runlike -p nginx</span><br></pre></td></tr></table></figure></li></ol><h1 id="引用文献"><a href="#引用文献" class="headerlink" title="引用文献"></a>引用文献</h1><p>[1] <a href="https://www.dianjilingqu.com/177835.html">Centos7-安装runlike用来查看docker容器启动时候的参数</a></p>]]></content>
    
    
    <summary type="html">docker下安装nginx</summary>
    
    
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/categories/docker/"/>
    
    <category term="nginx" scheme="http://wang_zhe343621.gitee.io/categories/docker/nginx/"/>
    
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/tags/docker/"/>
    
    <category term="nginx" scheme="http://wang_zhe343621.gitee.io/tags/nginx/"/>
    
    <category term="install" scheme="http://wang_zhe343621.gitee.io/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>后端返参Long型-JS显示精度不准确</title>
    <link href="http://wang_zhe343621.gitee.io/2023/01/16/%E5%90%8E%E7%AB%AF%E8%BF%94%E5%8F%82Long%E5%9E%8B-JS%E6%98%BE%E7%A4%BA%E7%B2%BE%E5%BA%A6%E4%B8%8D%E5%87%86%E7%A1%AE/"/>
    <id>http://wang_zhe343621.gitee.io/2023/01/16/%E5%90%8E%E7%AB%AF%E8%BF%94%E5%8F%82Long%E5%9E%8B-JS%E6%98%BE%E7%A4%BA%E7%B2%BE%E5%BA%A6%E4%B8%8D%E5%87%86%E7%A1%AE/</id>
    <published>2023-01-16T08:21:01.000Z</published>
    <updated>2023-04-02T18:51:30.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后端返参Long型-JS显示精度不准确"><a href="#后端返参Long型-JS显示精度不准确" class="headerlink" title="后端返参Long型-JS显示精度不准确"></a>后端返参Long型-JS显示精度不准确</h1><blockquote><p>方法一</p></blockquote><p>后端返参转为String类型</p><blockquote></blockquote>]]></content>
    
    
    <summary type="html">后端返参Long型-JS显示精度不准确</summary>
    
    
    
    <category term="question" scheme="http://wang_zhe343621.gitee.io/categories/question/"/>
    
    
    <category term="JavaScript" scheme="http://wang_zhe343621.gitee.io/tags/JavaScript/"/>
    
    <category term="前端" scheme="http://wang_zhe343621.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="后端" scheme="http://wang_zhe343621.gitee.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="精度不准确" scheme="http://wang_zhe343621.gitee.io/tags/%E7%B2%BE%E5%BA%A6%E4%B8%8D%E5%87%86%E7%A1%AE/"/>
    
    <category term="Long" scheme="http://wang_zhe343621.gitee.io/tags/Long/"/>
    
  </entry>
  
  <entry>
    <title>itextpdf生成pdf使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/12/16/itextpdf%E7%94%9F%E6%88%90pdf%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/12/16/itextpdf%E7%94%9F%E6%88%90pdf%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-16T05:57:41.000Z</published>
    <updated>2023-04-02T18:51:30.029Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>BaseFont</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BaseFont baseChineseFont = BaseFont.createFont(<span class="string">&quot;STSong-Light&quot;</span>, <span class="string">&quot;UniGB-UCS2-H&quot;</span>, BaseFont.EMBEDDED);</span><br><span class="line"><span class="comment">//pdf字体名称，字体编码，pdf文本是否内嵌</span></span><br></pre></td></tr></table></figure><blockquote><p>Font</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">titlefont = <span class="keyword">new</span> Font(bfChinese, <span class="number">16</span>, Font.BOLD);</span><br><span class="line">headfont = <span class="keyword">new</span> Font(bfChinese, <span class="number">14</span>, Font.BOLD);</span><br><span class="line">keyfont = <span class="keyword">new</span> Font(bfChinese, <span class="number">10</span>, Font.BOLD);</span><br><span class="line">textfont = <span class="keyword">new</span> Font(bfChinese, <span class="number">10</span>, Font.NORMAL);</span><br><span class="line">Font font = <span class="keyword">new</span> Font(baseChineseFont, <span class="number">12</span>, Font.NORMAL,BaseColor.BLACK); <span class="comment">//basefont,font-size,font-style,font-color</span></span><br></pre></td></tr></table></figure><blockquote><p>Paragraph 段落</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//段落</span></span><br><span class="line">Paragraph paragraph = <span class="keyword">new</span> Paragraph(“”, titlefont); <span class="comment">//content,font</span></span><br><span class="line">paragraph.setAlignment(<span class="number">1</span>); <span class="comment">//设置文本对齐方式居中 0靠左 1，居中 2，靠右；正常靠左</span></span><br><span class="line">paragraph.setIndentationLeft(<span class="number">12</span>); <span class="comment">//设置左缩进</span></span><br><span class="line">paragraph.setIndentationRight(<span class="number">12</span>); <span class="comment">//设置右缩进</span></span><br><span class="line">paragraph.setFirstLineIndent(<span class="number">24</span>); <span class="comment">//设置首行缩进 24 是2个中文字符</span></span><br><span class="line">paragraph.setLeading(<span class="number">20f</span>); <span class="comment">//行间距</span></span><br><span class="line">paragraph.setSpacingBefore(<span class="number">5f</span>); <span class="comment">//设置段落上空白</span></span><br><span class="line">paragraph.setSpacingAfter(<span class="number">10f</span>); <span class="comment">//设置段落下空白</span></span><br><span class="line"><span class="comment">// 直线</span></span><br><span class="line">Paragraph p1 = <span class="keyword">new</span> Paragraph();</span><br><span class="line">p1.add(<span class="keyword">new</span> Chunk(<span class="keyword">new</span> LineSeparator()));</span><br><span class="line">————————————————</span><br><span class="line"><span class="comment">// 点线</span></span><br><span class="line">Paragraph p2 = <span class="keyword">new</span> Paragraph();</span><br><span class="line">p2.add(<span class="keyword">new</span> Chunk(<span class="keyword">new</span> DottedLineSeparator()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 超链接</span></span><br><span class="line">Anchor anchor = <span class="keyword">new</span> Anchor(<span class="string">&quot;baidu&quot;</span>);</span><br><span class="line">anchor.setReference(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定位</span></span><br><span class="line">Anchor gotoP = <span class="keyword">new</span> Anchor(<span class="string">&quot;goto&quot;</span>);</span><br><span class="line">gotoP.setReference(<span class="string">&quot;#top&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">itextpdf 使用记录</summary>
    
    
    
    <category term="itextpdf" scheme="http://wang_zhe343621.gitee.io/categories/itextpdf/"/>
    
    
    <category term="itextpdf" scheme="http://wang_zhe343621.gitee.io/tags/itextpdf/"/>
    
  </entry>
  
  <entry>
    <title>vite使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/12/06/vite%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/12/06/vite%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-06T05:58:54.000Z</published>
    <updated>2023-04-02T18:51:30.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多环境配置文件"><a href="#多环境配置文件" class="headerlink" title="多环境配置文件"></a>多环境配置文件</h1><p><a href="https://www.jianshu.com/p/1e85185796d8">参考链接</a></p>]]></content>
    
    
    <summary type="html">vite 使用记录</summary>
    
    
    
    <category term="vite" scheme="http://wang_zhe343621.gitee.io/categories/vite/"/>
    
    
    <category term="vite" scheme="http://wang_zhe343621.gitee.io/tags/vite/"/>
    
    <category term="vue" scheme="http://wang_zhe343621.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>swagger 使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/12/05/swagger-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/12/05/swagger-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-05T05:46:31.000Z</published>
    <updated>2023-04-02T18:51:30.032Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@ApiImplicitParam</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多文件上传</span></span><br><span class="line"><span class="meta">@ApiImplicitParam(name = &quot;files&quot;, value = &quot;多个文件&quot; , paramType = &quot;formData&quot;,allowMultiple=true,required = true,dataType = &quot;file&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通参数</span></span><br><span class="line"><span class="meta">@ApiImplicitParam(name = &quot;bucketName&quot;, value = &quot;存储桶&quot;,dataTypeClass = String.class, required = true ,allowMultiple=true)</span></span><br></pre></td></tr></table></figure><ul><li>paramType<ul><li>formData 表单</li><li>query </li><li>body 请求体</li></ul></li><li>dataType 数据类型 文件 是file</li><li>allowMultiple 多选，是List,ArrayList</li></ul><p><img src="/.io//image-20221205140144242.png" alt="image-20221205140144242"></p>]]></content>
    
    
    <summary type="html">swagger 使用记录</summary>
    
    
    
    <category term="swagger" scheme="http://wang_zhe343621.gitee.io/categories/swagger/"/>
    
    
    <category term="swagger" scheme="http://wang_zhe343621.gitee.io/tags/swagger/"/>
    
    <category term="springboot" scheme="http://wang_zhe343621.gitee.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>docker 命令及软件安装</title>
    <link href="http://wang_zhe343621.gitee.io/2022/12/02/docker-%E5%91%BD%E4%BB%A4%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>http://wang_zhe343621.gitee.io/2022/12/02/docker-%E5%91%BD%E4%BB%A4%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</id>
    <published>2022-12-02T03:25:06.000Z</published>
    <updated>2023-04-02T18:51:30.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h1><blockquote><p>查看docker容器日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f 容器id</span><br><span class="line">docker logs -f minio</span><br></pre></td></tr></table></figure><h1 id="docker-安装软件"><a href="#docker-安装软件" class="headerlink" title="docker 安装软件"></a>docker 安装软件</h1><h2 id="minio"><a href="#minio" class="headerlink" title="minio"></a>minio</h2><blockquote><p>命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart always -p 9000:9000 -p 9001:9001 --name minio -v /data/minio/data:/data -v /data/minio/config:/root/.minio -e <span class="string">&quot;MINIO_ROOT_USER=admin&quot;</span> -e <span class="string">&quot;MINIO_ROOT_PASSWORD=minioadmin&quot;</span> minio/minio server /data --console-address <span class="string">&quot;:9000&quot;</span> --address <span class="string">&quot;:9001&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>ak&amp;sk</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">minioadmin</span><br></pre></td></tr></table></figure><blockquote><p>成功日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@racknerd-9c2e31 minio]<span class="comment"># docker logs -f minio</span></span><br><span class="line">WARNING: MINIO_ACCESS_KEY and MINIO_SECRET_KEY are deprecated.</span><br><span class="line">         Please use MINIO_ROOT_USER and MINIO_ROOT_PASSWORD</span><br><span class="line">Formatting 1st pool, 1 <span class="built_in">set</span>(s), 1 drives per <span class="built_in">set</span>.</span><br><span class="line">WARNING: Host <span class="built_in">local</span> has more than 0 drives of <span class="built_in">set</span>. A host failure will result <span class="keyword">in</span> data becoming unavailable.</span><br><span class="line">Warning: Default parity <span class="built_in">set</span> to 0. This can lead to data loss.</span><br><span class="line">MinIO Object Storage Server</span><br><span class="line">Copyright: 2015-2022 MinIO, Inc.</span><br><span class="line">License: GNU AGPLv3 &lt;https://www.gnu.org/licenses/agpl-3.0.html&gt;</span><br><span class="line">Version: RELEASE.2022-11-29T23-40-49Z (go1.19.3 linux/amd64)</span><br><span class="line"></span><br><span class="line">Status:         1 Online, 0 Offline. </span><br><span class="line">API: http://172.17.0.6:9001  http://127.0.0.1:9001 </span><br><span class="line">Console: http://172.17.0.6:9000 http://127.0.0.1:9000 </span><br><span class="line"></span><br><span class="line">Documentation: https://min.io/docs/minio/linux/index.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">docker 命令及软件安装</summary>
    
    
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/categories/docker/"/>
    
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Oracle 命令记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/11/24/Oracle-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/11/24/Oracle-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2022-11-24T10:32:41.000Z</published>
    <updated>2023-04-02T18:51:29.973Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>查询所有用户</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dba_users;</span><br></pre></td></tr></table></figure><blockquote><p>创建用户</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER blog IDENTIFIED BY blog;</span><br></pre></td></tr></table></figure><blockquote><p>用户赋权</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT CREATE SESSION TO blog;</span><br><span class="line">GRANT connect,resource TO blog;</span><br></pre></td></tr></table></figure><blockquote><p>查看用户权限</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user_sys_privs;//查看当前用户所有权限</span><br><span class="line"></span><br><span class="line">SELECT * FROM user_tab_privs;//查看所用用户对表的权限</span><br></pre></td></tr></table></figure><blockquote><p>修改用户密码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER system IDENTIFIED BY system;</span><br><span class="line"></span><br><span class="line">ALTER USER sys IDENTIFIED BY sys;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">oracle 语法记录</summary>
    
    
    
    <category term="oracle" scheme="http://wang_zhe343621.gitee.io/categories/oracle/"/>
    
    
    <category term="oracle" scheme="http://wang_zhe343621.gitee.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>PL/SQL 15注册码</title>
    <link href="http://wang_zhe343621.gitee.io/2022/08/17/PL-SQL-15%E6%B3%A8%E5%86%8C%E7%A0%81/"/>
    <id>http://wang_zhe343621.gitee.io/2022/08/17/PL-SQL-15%E6%B3%A8%E5%86%8C%E7%A0%81/</id>
    <published>2022-08-17T01:13:12.000Z</published>
    <updated>2023-04-02T18:51:29.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022-8-17-验证可用"><a href="#2022-8-17-验证可用" class="headerlink" title="2022/8/17 验证可用"></a>2022/8/17 验证可用</h1><p>进入帮助 -&gt; 注册，<br>输入：<br>产品编号：kfsvzt6zh2exaxzxgjk44rv5kp2yp68vgk<br>序列号：186220<br>口令：xs374ca</p><p>直接获得9999-12-31，美滋滋</p><p><a href="https://blog.csdn.net/weixin_42966484/article/details/112767709?spm=1001.2014.3001.5506">原文链接</a></p>]]></content>
    
    
    <summary type="html">PL/SQL 15注册码</summary>
    
    
    
    <category term="PLSQL" scheme="http://wang_zhe343621.gitee.io/categories/PLSQL/"/>
    
    
    <category term="PLSQL" scheme="http://wang_zhe343621.gitee.io/tags/PLSQL/"/>
    
    <category term="注册码" scheme="http://wang_zhe343621.gitee.io/tags/%E6%B3%A8%E5%86%8C%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>PLSQL安装并且连接远程库</title>
    <link href="http://wang_zhe343621.gitee.io/2022/08/16/PLSQL%E5%AE%89%E8%A3%85%E5%B9%B6%E4%B8%94%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E5%BA%93/"/>
    <id>http://wang_zhe343621.gitee.io/2022/08/16/PLSQL%E5%AE%89%E8%A3%85%E5%B9%B6%E4%B8%94%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E5%BA%93/</id>
    <published>2022-08-16T04:32:31.000Z</published>
    <updated>2023-04-02T18:51:29.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PLSQL-DEVELOPER15-下载安装"><a href="#PLSQL-DEVELOPER15-下载安装" class="headerlink" title="PLSQL_DEVELOPER15 下载安装"></a>PLSQL_DEVELOPER15 下载安装</h1><p><a href="https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html">下载链接</a></p><p><img src="/.io//image-20220816124115252.png" alt="image-20220816124115252"></p><p>需要安装图中的环境</p><h1 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h1><p><img src="/.io//image-20220816124920979.png" alt="image-20220816124920979"></p>]]></content>
    
    
    <summary type="html">PLSQL15安装并使用</summary>
    
    
    
    <category term="PLSQL" scheme="http://wang_zhe343621.gitee.io/categories/PLSQL/"/>
    
    
    <category term="PLSQL" scheme="http://wang_zhe343621.gitee.io/tags/PLSQL/"/>
    
  </entry>
  
  <entry>
    <title>StreamApi</title>
    <link href="http://wang_zhe343621.gitee.io/2022/05/27/StreamApi/"/>
    <id>http://wang_zhe343621.gitee.io/2022/05/27/StreamApi/</id>
    <published>2022-05-27T01:36:33.000Z</published>
    <updated>2023-04-02T18:51:30.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="map-flatMap"><a href="#map-flatMap" class="headerlink" title="map/flatMap"></a>map/flatMap</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map，它的作用就是把inputStream的每个元素映射成outputStream的另外一个元素</p><p>map生成的是个1:1映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; nums = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Integer&gt; squareNums = nums.stream().map(n -&gt; n * n).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>flatMap把inputStream中的层级结构 扁平化，就是将最底层元素抽出来放到一起，最终output的新Stream里面已经没有List了，都是直接的数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(</span><br><span class="line"> Arrays.asList(<span class="number">1</span>),</span><br><span class="line"> Arrays.asList(<span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line"> Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"> );</span><br><span class="line">Stream&lt;Integer&gt; outputStream = inputStream.</span><br><span class="line">flatMap((childList) -&gt; childList.stream());</span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>filter对原始Stream进行某项测试，通过测试的元素被留下来生成一个新Stream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 留下偶数</span></span><br><span class="line">Integer[] sixNums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">Integer[] evens =</span><br><span class="line">Stream.of(sixNums).filter(n -&gt; n%<span class="number">2</span> == <span class="number">0</span>).toArray(Integer[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>循环，terminal操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">umsAdmins.stream().filter(n -&gt; n.getStatus() == <span class="number">1</span>).forEach(n -&gt; System.out.println(n.getUsername()));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>forEach是terminal操作。因此，它执行后，Stream 的元素就被“消费”掉了，你无法对一个Stream进行两次terminal运算。下面的代码是错误的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stream.forEach(element -&gt; doOneThing(element));</span><br><span class="line">stream.forEach(element -&gt; doAnotherThing(element));</span><br></pre></td></tr></table></figure><h2 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h2><p>这是一个termimal兼short-circuiting操作，它总是返回Stream的第一个元素或者空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;UmsAdmin&gt; stream = umsAdmins.stream();</span><br><span class="line">Optional&lt;UmsAdmin&gt; first = stream.findFirst();</span><br><span class="line">UmsAdmin umsAdmin3 = first.get();</span><br><span class="line">System.out.println(umsAdmin3);</span><br><span class="line">String integer = Optional.ofNullable(umsAdmin3.getPassword()).map(n -&gt; n).orElse(String.valueOf(-<span class="number">1</span>));</span><br><span class="line">System.out.println(integer);</span><br></pre></td></tr></table></figure><p>findFirst 返回的是Optional</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://blog.csdn.net/justloveyou_/article/details/79562574">StreamApi 的背景及使用</a></p>]]></content>
    
    
    <summary type="html">StreamApi 使用记录</summary>
    
    
    
    <category term="Java" scheme="http://wang_zhe343621.gitee.io/categories/Java/"/>
    
    <category term="8" scheme="http://wang_zhe343621.gitee.io/categories/Java/8/"/>
    
    <category term="StreamApi" scheme="http://wang_zhe343621.gitee.io/categories/Java/8/StreamApi/"/>
    
    
    <category term="Java8新特性" scheme="http://wang_zhe343621.gitee.io/tags/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    <category term="StreamApi" scheme="http://wang_zhe343621.gitee.io/tags/StreamApi/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Swagger</title>
    <link href="http://wang_zhe343621.gitee.io/2022/05/18/SpringBoot%E6%95%B4%E5%90%88Swagger/"/>
    <id>http://wang_zhe343621.gitee.io/2022/05/18/SpringBoot%E6%95%B4%E5%90%88Swagger/</id>
    <published>2022-05-18T02:47:58.000Z</published>
    <updated>2023-04-02T18:51:29.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="swagger-简介"><a href="#swagger-简介" class="headerlink" title="swagger 简介"></a>swagger 简介</h1><h1 id="整合swagger"><a href="#整合swagger" class="headerlink" title="整合swagger"></a>整合swagger</h1><h2 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h2><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><h1 id="2-6-x-以上-整合出现的问题"><a href="#2-6-x-以上-整合出现的问题" class="headerlink" title="2.6.x 以上 整合出现的问题"></a>2.6.x 以上 整合出现的问题</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h1><p><a href="https://blog.csdn.net/qq_40205116/article/details/105200104?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165284373416781483781926%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165284373416781483781926&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105200104-null-null.142%5Ev10%5Econtrol,157%5Ev4%5Econtrol&utm_term=swagger2&spm=1018.2226.3001.4187">swagger2整合</a></p><p><a href="https://blog.csdn.net/weixin_43740223/article/details/108491386?spm=1001.2014.3001.5506">swagger3整合</a></p><p><a href="https://xingyun.blog.csdn.net/article/details/123753888?spm=1001.2014.3001.5506">springboot2.6x 兼容问题</a></p>]]></content>
    
    
    <summary type="html">SpringBoot整合Swagger</summary>
    
    
    
    <category term="SpringBoot" scheme="http://wang_zhe343621.gitee.io/categories/SpringBoot/"/>
    
    <category term="Swagger" scheme="http://wang_zhe343621.gitee.io/categories/SpringBoot/Swagger/"/>
    
    
    <category term="SpringBoot" scheme="http://wang_zhe343621.gitee.io/tags/SpringBoot/"/>
    
    <category term="Swagger" scheme="http://wang_zhe343621.gitee.io/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>springboot项目改端口,一直显示端口被占用</title>
    <link href="http://wang_zhe343621.gitee.io/2022/05/13/springboot%E9%A1%B9%E7%9B%AE%E6%94%B9%E7%AB%AF%E5%8F%A3-%E4%B8%80%E7%9B%B4%E6%98%BE%E7%A4%BA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
    <id>http://wang_zhe343621.gitee.io/2022/05/13/springboot%E9%A1%B9%E7%9B%AE%E6%94%B9%E7%AB%AF%E5%8F%A3-%E4%B8%80%E7%9B%B4%E6%98%BE%E7%A4%BA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/</id>
    <published>2022-05-13T02:28:27.000Z</published>
    <updated>2023-04-02T18:51:30.030Z</updated>
    
    <content type="html"><![CDATA[<p>springboot项目，无论修改什么端口，都显示端口被占用。</p><blockquote><p>错误原因</p></blockquote><p>java程序假死，需要在控制台需清理进程</p><p> <img src="/.io//image-20220513103147763.png" alt="image-20220513103147763"></p><p><strong><a href="https://blog.csdn.net/YangHongcxy/article/details/120783257?spm=1001.2014.3001.5506">原文链接</a></strong></p>]]></content>
    
    
    <summary type="html">springboot项目改端口,一直显示端口被占用</summary>
    
    
    
    <category term="采坑" scheme="http://wang_zhe343621.gitee.io/categories/%E9%87%87%E5%9D%91/"/>
    
    <category term="java" scheme="http://wang_zhe343621.gitee.io/categories/%E9%87%87%E5%9D%91/java/"/>
    
    
    <category term="错误" scheme="http://wang_zhe343621.gitee.io/tags/%E9%94%99%E8%AF%AF/"/>
    
    <category term="java" scheme="http://wang_zhe343621.gitee.io/tags/java/"/>
    
    <category term="error" scheme="http://wang_zhe343621.gitee.io/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-plus使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/04/15/mybatis-plus%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/04/15/mybatis-plus%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2022-04-15T02:23:12.000Z</published>
    <updated>2023-04-02T18:51:30.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot-整合mybatis-plus"><a href="#springboot-整合mybatis-plus" class="headerlink" title="springboot 整合mybatis-plus"></a>springboot 整合mybatis-plus</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>application.yaml配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">auto-mapping-behavior:</span> <span class="string">full</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/**/*Mapper.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="comment"># 逻辑删除配置</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 删除前</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 删除后</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">mybatis-plus使用记录</summary>
    
    
    
    <category term="mybatis-plus" scheme="http://wang_zhe343621.gitee.io/categories/mybatis-plus/"/>
    
    
    <category term="mybatis-plus" scheme="http://wang_zhe343621.gitee.io/tags/mybatis-plus/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/04/14/SpringSecurity%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/04/14/SpringSecurity%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2022-04-14T03:09:49.000Z</published>
    <updated>2023-04-02T18:51:30.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>spring-security会自动添加一个登陆页面</strong></p><ul><li>用户 user</li><li>密码 会在控制台打印</li></ul><h1 id="springSecurity基本原理"><a href="#springSecurity基本原理" class="headerlink" title="springSecurity基本原理"></a>springSecurity基本原理</h1><p><strong>spring-security本质上是过滤器链</strong></p><p><strong>FilterSecurityInterceptor 是一个方法级的过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//过滤器体</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.invoke(<span class="keyword">new</span> FilterInvocation(request, response, chain));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//过滤器的执行体</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(FilterInvocation filterInvocation)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isApplied(filterInvocation) &amp;&amp; <span class="keyword">this</span>.observeOncePerRequest) &#123;</span><br><span class="line">        filterInvocation.getChain().doFilter(filterInvocation.getRequest(), filterInvocation.getResponse());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (filterInvocation.getRequest() != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.observeOncePerRequest) &#123;</span><br><span class="line">            filterInvocation.getRequest().setAttribute(<span class="string">&quot;__spring_security_filterSecurityInterceptor_filterApplied&quot;</span>, Boolean.TRUE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断之前过滤器的结果</span></span><br><span class="line">        InterceptorStatusToken token = <span class="keyword">super</span>.beforeInvocation(filterInvocation);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行当前过滤器</span></span><br><span class="line">            filterInvocation.getChain().doFilter(filterInvocation.getRequest(), filterInvocation.getResponse());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.finallyInvocation(token);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//执行下一个过滤器</span></span><br><span class="line">        <span class="keyword">super</span>.afterInvocation(token, (Object)<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ExceptionTranslationFilter异常转换过滤器</strong></p><p>处理权限认证过程种抛出的异常</p><p><strong>UsernamePasswordAuthenticationFilter 判断用户post请求种的用户名和密码</strong></p><p><img src="/.io//image-20220414120714351.png" alt="image-20220414120714351"></p><h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="不使用springboot配置security"><a href="#不使用springboot配置security" class="headerlink" title="不使用springboot配置security"></a>不使用springboot配置security</h2><p><strong>DelegatingFilterProxy</strong></p><h2 id="自定义用户名和密码匹配获取权限"><a href="#自定义用户名和密码匹配获取权限" class="headerlink" title="自定义用户名和密码匹配获取权限"></a>自定义用户名和密码匹配获取权限</h2><p><strong>获取用户数据</strong></p><ol><li><p>在配置文件中配置用户名和密码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure></li><li><p>通过配置类设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承 WebSecurityConfigurerAdapter</span></span><br><span class="line"><span class="comment">// 设置的密码必须加密，使用passwordEncoder相同的加密器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        BCryptPasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        String encode = passwordEncoder.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;wangzhe&quot;</span>)</span><br><span class="line">                .password(encode)</span><br><span class="line">                        .roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须设置加密器</span></span><br><span class="line">    <span class="comment">//exception：id null...</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>配置类设置的密码必须加密，必须设置passwordEncoder</strong></p><ol start="3"><li><p>通过数据库查找来获取用户名和密码，需要实现UserDetailService 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyUserDetailService myUserDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(myUserDetailService)</span><br><span class="line">                .passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;roles&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;xiaomi&quot;</span>, <span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>),authorities);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="自定义登录页面"><a href="#自定义登录页面" class="headerlink" title="自定义登录页面"></a>自定义登录页面</h2><pre><code>  登录页面必须以post请求，表单的name必须设置为username,password。  必须设置登录页面放行策略  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">// 登录页面</span></span><br><span class="line">                        .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>) <span class="comment">//表单登录按钮路径</span></span><br><span class="line">                                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>) <span class="comment">//登录成功的默认跳转路径</span></span><br><span class="line">                                        .and().authorizeHttpRequests()</span><br><span class="line">                        .antMatchers(<span class="string">&quot;/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/login.html&quot;</span>).permitAll() <span class="comment">//放行路径,需要添加登录页面到放行路径中</span></span><br><span class="line">                        .anyRequest().authenticated()</span><br><span class="line">                        .and().csrf().disable();<span class="comment">//关闭csrf 防护</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h2><pre><code>  &gt; 单权限  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       http.formLogin()</span><br><span class="line">               .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">// 登录页面</span></span><br><span class="line">                       .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>) <span class="comment">//表单登录按钮路径</span></span><br><span class="line">                               .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>) <span class="comment">//登录成功的默认跳转路径</span></span><br><span class="line">                                       .and().authorizeHttpRequests()</span><br><span class="line">                       .antMatchers(<span class="string">&quot;/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/login.html&quot;</span>).permitAll() <span class="comment">//放行路径,需要添加登录页面到放行路径中</span></span><br><span class="line">                       .antMatchers(<span class="string">&quot;/test/authority&quot;</span>).hasAuthority(<span class="string">&quot;admin&quot;</span>) <span class="comment">//添加权限校验</span></span><br><span class="line">                       .antMatchers(<span class="string">&quot;/test/authorities&quot;</span>).hasAnyAuthority(<span class="string">&quot;admin,girl&quot;</span>)</span><br><span class="line">                       .anyRequest().authenticated()</span><br><span class="line">                       .and().csrf().disable();<span class="comment">//关闭csrf 防护</span></span><br><span class="line">   &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure></code></pre><p>​      </p><pre><code>  &gt; 多权限  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/test/authorities&quot;</span>).hasAnyAuthority(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;girl&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><p>​      </p><pre><code>  **权限不足**  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Whitelabel Error Page</span><br><span class="line">This application has no explicit mapping for /error, so you are seeing this as a fallback.</span><br><span class="line"></span><br><span class="line">Fri Apr 15 16:07:39 CST 2022</span><br><span class="line">There was an unexpected error (type=Forbidden, status=403).</span><br><span class="line">Forbidden</span><br></pre></td></tr></table></figure></code></pre><p>​      </p><h2 id="用户角色分配"><a href="#用户角色分配" class="headerlink" title="用户角色分配"></a>用户角色分配</h2><pre><code>  &gt; 分配权限是 字符串需要在前面拼接 `ROLE_`  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单角色分配</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/test/authority&quot;</span>).hasRole(<span class="string">&quot;producer&quot;</span>)</span><br><span class="line">.antMatchers(<span class="string">&quot;/test/authorities&quot;</span>).hasAnyRole(<span class="string">&quot;producer&quot;</span>,<span class="string">&quot;consumer&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><p>​      </p><h2 id="自定义403-错误页面"><a href="#自定义403-错误页面" class="headerlink" title="自定义403 错误页面"></a>自定义403 错误页面</h2><blockquote><p> <strong>security配置类中添加</strong></p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br></pre></td></tr></table></figure><p>​      </p><h2 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h2><h3 id="Secured"><a href="#Secured" class="headerlink" title="@Secured"></a>@Secured</h3><p>指定访问目标 所需的 角色</p><p>注解可以被用在方法上，controller或者service层都可以</p><p><strong>开启注解使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在启动类或者是配置类上添加 启动注解</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>访问目标上添加<code>角色</code>校验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Secured(&#123;&quot;ROLE_admin&quot;, &quot;ROLE_manager&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getUserList() &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUserList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PreAuthorize"><a href="#PreAuthorize" class="headerlink" title="@PreAuthorize"></a>@PreAuthorize</h3><p>可以在进入方法前 进行校验</p><p><strong>开启注解支持</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br></pre></td></tr></table></figure><p><strong>在访问目标上添加<code>角色</code>or<code>权限</code>校验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;) and hasAnyRole(&#x27;ROLE_manager&#x27;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getById(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostAuthorize"><a href="#PostAuthorize" class="headerlink" title="@PostAuthorize"></a>@PostAuthorize</h3><p>在方法执行后校验</p><p><strong>开启注解支持</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true )</span></span><br></pre></td></tr></table></figure><p><strong>在访问目标上添加<code>角色</code>or<code>权限</code>校验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostAuthorize(&quot;hasAnyRole(&#x27;ROLE_manager&#x27;) and hasAnyAuthority(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getById(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostFilter"><a href="#PostFilter" class="headerlink" title="@PostFilter"></a>@PostFilter</h3><p>对方法的返回结果进行过滤</p><p><strong>在访问目标上添加结果过滤</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filterObject 是返回List中的单个对象，可以使用方法，或者是.属性 </span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Secured(&#123;&quot;ROLE_admin&quot;, &quot;ROLE_manager&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PostFilter(&quot;filterObject.get(&#x27;username&#x27;) == &#x27;admin&#x27;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getUserList() &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUserList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PreFilter"><a href="#PreFilter" class="headerlink" title="@PreFilter"></a>@PreFilter</h3><p>对方法的入参进行校验</p><h2 id="用户注销"><a href="#用户注销" class="headerlink" title="用户注销"></a>用户注销</h2><ol><li><p>security配置 <code>登出路径</code> 和 <code>登出成功页面</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="string">&quot;/logoutSuccess.html&quot;</span>);</span><br><span class="line">需要放行logoutSuccess.html页面，但是只能有一个permitALL</span><br></pre></td></tr></table></figure></li></ol><h2 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h2><ol><li><p>创建token-userinfo 表</p><p>建表语句在<code>org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl</code>类中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> persistent_logins (</span><br><span class="line">username <span class="type">VARCHAR</span> ( <span class="number">64</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">series <span class="type">VARCHAR</span> ( <span class="number">64</span> ) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">token <span class="type">VARCHAR</span> ( <span class="number">64</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">last_used <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>)</span><br></pre></td></tr></table></figure></li><li><p>配置数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置 PersistentTokenRepository 的数据源</span></span><br><span class="line"><span class="comment">//在配置类中添加</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JdbcTokenRepositoryImpl jdbcTokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">    jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>configure(HttpSecurity http)</code>中配置自动登录的数据库，token持续时间，userservice</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.and().rememberMe().tokenRepository(persistentTokenRepository())<span class="comment">//设置自动登录，数据库操作对象</span></span><br><span class="line">      .tokenValiditySeconds(<span class="number">60</span>) <span class="comment">//设置token的有效时间，单位秒</span></span><br><span class="line">      .userDetailsService(userDetailsService())</span><br></pre></td></tr></table></figure></li><li><p>在登录页面添加<strong>复选框：十天免登录</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span>&gt;</span> 5分钟之内免登录</span><br></pre></td></tr></table></figure></li><li><p>测试结果查看，客户端的cookie，数据库中的数据</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据库信息</span><br><span class="line">adminA1m2uLrSTC3CRQ9IRzyIgQ==Ieotk5N33+/5I6MNODR3gQ==2022-05-13 09:44:44</span><br></pre></td></tr></table></figure><p><strong>客户端cookie信息</strong></p><p><img src="/.io//image-20220513095136449.png" alt="image-20220513095136449"></p></li></ol><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="CSRF简介"><a href="#CSRF简介" class="headerlink" title="CSRF简介"></a>CSRF简介</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  CSRF(Cross-site request forgery)跨站请求伪造，也被称为&quot;One Click Attack&quot;或者Session Riding，通常缩写为CSRF或者</span><br><span class="line">XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本(XSS)，但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装成受信</span><br><span class="line">任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行(因此对其进行防范的资源也相当稀少)和难以防范，所以被认为比</span><br><span class="line">XSS更具危险性。</span><br></pre></td></tr></table></figure><p><strong>SpringSecurity 4之后</strong></p><p>默认开启CSRF保护，会针对POST,PUT,PATCH,DELETE这些请求进行保护。</p><p>开启后，只能在同站进行访问，跨站是不能访问的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭CSRF</span></span><br><span class="line">http.csrf().disable();<span class="comment">//关闭csrf 防护</span></span><br></pre></td></tr></table></figure><p><strong>csrf的实现在过滤器中</strong></p><p><code>org.springframework.security.web.csrf.CsrfFilter</code>springSecurity 中的csrf功能时在这个过滤器中</p><h2 id="开启csrf校验"><a href="#开启csrf校验" class="headerlink" title="开启csrf校验"></a>开启csrf校验</h2><ol><li>在配置类中开启CSRF校验</li><li>需要在请求的时候传递_csrf的token</li></ol><h1 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h1><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="登录成功后的行为"><a href="#登录成功后的行为" class="headerlink" title="登录成功后的行为"></a>登录成功后的行为</h2><ol><li>defaultSuccessUrl,successForwardUrl</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin().defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>,<span class="keyword">true</span>).successForwardUrl(<span class="string">&quot;/index&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>http.successHandler(AuthenticationSuccessHandler successHandler)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">http.successHandler(AuthenticationSuccessHandler successHandler);</span><br><span class="line"><span class="comment">//配置</span></span><br><span class="line">.successHandler(<span class="keyword">new</span> authenticationSuccessHandler());</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">authenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">            Object principal = authentication.getPrincipal();</span><br><span class="line">            PrintWriter writer = response.getWriter();</span><br><span class="line">            writer.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(principal));</span><br><span class="line">            writer.flush();</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//Lamda写法</span></span><br><span class="line">.successHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">    Object principal = authentication.getPrincipal();</span><br><span class="line">    resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line">    out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(principal));</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="登录失败后的行为"><a href="#登录失败后的行为" class="headerlink" title="登录失败后的行为"></a>登录失败后的行为</h2><ol><li>```java<br>.failureUrl(“/failure”) //跳转登录失败页面<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```java</span><br><span class="line">   //登录失败，处理方法，前后端分离时使用</span><br><span class="line">   .failureHandler((req, resp, e) -&gt; &#123;</span><br><span class="line">       resp.setContentType(&quot;application/json;charset=utf-8&quot;);</span><br><span class="line">       PrintWriter out = resp.getWriter();</span><br><span class="line">       out.write(e.getMessage());</span><br><span class="line">       out.flush();</span><br><span class="line">       out.close();</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="未认证时访问其他页面是的行为"><a href="#未认证时访问其他页面是的行为" class="headerlink" title="未认证时访问其他页面是的行为"></a>未认证时访问其他页面是的行为</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里主要是针对，前后端分离的情况，后台没有办法重定向。 </span></span><br><span class="line">http.exceptionHandling().authenticationEntryPoint((req,resp,authException) -&gt; &#123;</span><br><span class="line">            resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            PrintWriter writer = resp.getWriter();</span><br><span class="line">            writer.write(<span class="string">&quot;尚未登录，清闲登录&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="注销登录后返回json数据"><a href="#注销登录后返回json数据" class="headerlink" title="注销登录后返回json数据"></a>注销登录后返回json数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http.logout()   .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">                .logoutSuccessUrl(<span class="string">&quot;/logoutSuccess&quot;</span>)</span><br><span class="line">                .logoutSuccessHandler((req,resp,auth) -&gt; &#123;</span><br><span class="line">                    Object principal = auth.getPrincipal();</span><br><span class="line">                    resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                    PrintWriter writer = resp.getWriter();</span><br><span class="line">                    writer.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(principal));</span><br><span class="line">                    writer.write(<span class="string">&quot;登出成功&quot;</span>);</span><br><span class="line">                    writer.flush();</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><h2 id="配置用户的方式"><a href="#配置用户的方式" class="headerlink" title="配置用户的方式"></a>配置用户的方式</h2><ol><li><p>配置在内存中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    auth.inMemoryAuthentication()</span><br><span class="line">        .withUser(<span class="string">&quot;aoa&quot;</span>)</span><br><span class="line">        .password(passwordEncoder()</span><br><span class="line">        .encode(<span class="string">&quot;123&quot;</span>))</span><br><span class="line">        .roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置UserDetailsService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 重写方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在这里创建</span></span><br><span class="line">        InMemoryUserDetailsManager inMemoryUserDetailsManager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        inMemoryUserDetailsManager.createUser(User.withUsername(<span class="string">&quot;bin&quot;</span>).password(passwordEncoder().encode(<span class="string">&quot;123&quot;</span>)).roles(<span class="string">&quot;bin&quot;</span>).build());</span><br><span class="line">        inMemoryUserDetailsManager.createUser(User.withUsername(<span class="string">&quot;sofm&quot;</span>).password(passwordEncoder().encode(<span class="string">&quot;123&quot;</span>)).roles(<span class="string">&quot;sofm&quot;</span>).build());</span><br><span class="line">        <span class="keyword">return</span> inMemoryUserDetailsManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 在configure(auth)中配置</span></span><br><span class="line"> auth.userDetailsService((userName)-&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="权限继承"><a href="#权限继承" class="headerlink" title="权限继承"></a>权限继承</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新版本可能配置的字符串中使用 \n 分割   </span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RoleHierarchy <span class="title">roleHierarchy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RoleHierarchyImpl hierarchy = <span class="keyword">new</span> RoleHierarchyImpl();</span><br><span class="line">        hierarchy.setHierarchy(<span class="string">&quot;ROLE_admin &gt; ROLE_bin&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hierarchy;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SpringSecurity使用记录</summary>
    
    
    
    <category term="SpringSecurity" scheme="http://wang_zhe343621.gitee.io/categories/SpringSecurity/"/>
    
    
    <category term="SpringSecurity" scheme="http://wang_zhe343621.gitee.io/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/04/06/Docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/04/06/Docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2022-04-06T06:46:39.000Z</published>
    <updated>2023-04-02T18:51:29.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="https://www.docker.com/">官网</a></p><p><a href="https://docs.docker.com/">文档</a></p><p><a href="https://hub.docker.com/">仓库</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p>安装yum和配置镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装yum</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加阿里云镜像</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">  --add-repo \</span><br><span class="line">  http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装最近稳定版docker</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>测试docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">以下信息表示你的docker安装成功</span></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br></pre></td></tr></table></figure></li><li><p>卸载docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载docker</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除镜像</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure></li></ol><h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><h2 id="docker-run的运行流程图"><a href="#docker-run的运行流程图" class="headerlink" title="docker run的运行流程图"></a>docker run的运行流程图</h2><p><img src="/.io//image-20220407111402318.png" alt="image-20220407111402318"></p><h2 id="docker与虚拟机对比，为什么快？"><a href="#docker与虚拟机对比，为什么快？" class="headerlink" title="docker与虚拟机对比，为什么快？"></a>docker与虚拟机对比，为什么快？</h2><h1 id="docker-的常用命令"><a href="#docker-的常用命令" class="headerlink" title="docker 的常用命令"></a>docker 的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line">docker 命令 --help # 帮助命令</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><p><a href="https://docs.docker.com/engine/reference/run/">命令</a></p><p><a href="https://hub.docker.com/">docker hub</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong> 查看本地所有镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><strong>docker search 镜像</strong>   搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这个搜索是和在docker hub  中搜索是一项的</span></span><br><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><p><strong>docker pull 镜像 [:tag]</strong>  下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">默认下载是latest版本</span></span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>docker rmi 镜像name/id [-f]</strong> 删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不加版本号，默认是latest</span></span><br><span class="line">docker rmi -f mysql</span><br><span class="line">docker rmi -f mysql hello-world # 删除多个镜像</span><br><span class="line">docker rmi -f $(docker images -aq) # 删除所有镜像</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>docker run [参数] image      创建并启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos /bin/bash#以交互的方式启动容器</span><br><span class="line"></span><br><span class="line">[root@localhost /]# docker run -it centos /bin/bash</span><br><span class="line">[root@9dc8ce07f368 /]# ls# @9dc8ce07f368 是容器id</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@9dc8ce07f368 /]# exit#退出并删除容器</span><br><span class="line">exit</span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">ex1</span></span><br><span class="line">docker run -d -p=3344:80 --name=nginx nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>exit 退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p><strong>ctrl + p +q</strong> 退出容器,但不删除容器</p><p><strong>docker ps   查询容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps#查询正在运行的容器</span><br><span class="line">docker ps -a#查询所有的容器，运行+历史运行的容器</span><br><span class="line">docker ps -q#显示容器id</span><br></pre></td></tr></table></figure><p><strong>docker rm</strong> 删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm containerid#删除的容器必须停止运行</span><br><span class="line">docker rm $(docker ps -aq)# 删除所有容器</span><br><span class="line">docker ps -aq|xargs docker rm # linux 管道传参</span><br></pre></td></tr></table></figure><p><strong>启动和停止容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start #启动容器</span><br><span class="line">docker restart #重启容器</span><br><span class="line">docker stop #停止容器</span><br><span class="line">docker kill #强制停止容器</span><br></pre></td></tr></table></figure><h2 id="常用的其他命令"><a href="#常用的其他命令" class="headerlink" title="常用的其他命令"></a>常用的其他命令</h2><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行容器</span></span><br><span class="line">docker run --name test -d centos /bin/sh -c &quot;while true; do $(echo date); sleep 1; done&quot;</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志</span></span><br><span class="line">docker logs -tf -n 2 --until=2s containerid</span><br></pre></td></tr></table></figure><p><strong>查看容器中的进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker top bc63cfe835fb</span><br><span class="line"></span><br><span class="line">[root@localhost /]# docker top bc63cfe835fb</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                123674              123652              0                   10:14               ?                   00:00:00            /bin/sh -c while true; do date; sleep 1; done</span><br><span class="line">root                124989              123674              0                   10:23               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line">[root@localhost /]# </span><br></pre></td></tr></table></figure><p><strong>查看容器中的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect bc63cfe835fb</span><br></pre></td></tr></table></figure><p><strong>进入正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入后，开启一个新的终端</span></span><br><span class="line">docker exec -it bc63cfe835fb /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入后，进入正在执行的终端</span></span><br><span class="line">docker attach bc63cfe835fb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>从容器传递文件到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp containerid:path 宿主机上path</span><br><span class="line">docker cp test:/home/wangzhe.txt /home/test</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>查看容器的运行状况</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stats</span><br><span class="line">CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT     MEM %     NET I/O        BLOCK I/O     PIDS</span><br><span class="line">5895b696ec89   tomcat    0.22%     128.3MiB / 2.727GiB   4.59%     15kB / 138kB   2.34MB / 0B   36</span><br></pre></td></tr></table></figure><h2 id="补充命令"><a href="#补充命令" class="headerlink" title="补充命令"></a>补充命令</h2><p><strong>镜像重命名</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag imageid updateinfo:tag</span><br></pre></td></tr></table></figure><p><strong>镜像打包与加载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker save -o test.tar 15296797459/diycentos:1.0</span><br><span class="line"></span><br><span class="line">docker load</span><br></pre></td></tr></table></figure><p><strong>查看容器网络</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network</span><br></pre></td></tr></table></figure><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p><a href="https://docs.portainer.io/v/ce-2.11/start/install/server/docker/linux">portainer 官网</a></p><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull portainer/portainer-ce</span><br><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">9000 是可视化界面的访问地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h1><h2 id="修改保存镜像"><a href="#修改保存镜像" class="headerlink" title="修改保存镜像"></a>修改保存镜像</h2><p><strong>提交修改后的容器为新的镜像</strong></p><blockquote><p>对于下载的镜像修改后，保存为新的镜像，类似于快照</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a=&quot;author&quot; -m=&quot;comonent&quot; containerid new_image_name:tag  </span><br><span class="line">[root@localhost test]# docker commit -a=&quot;wangzhe&quot; -m=&quot;add a new web app&quot; 5895b696ec89 tomcat_prime:1.0  </span><br><span class="line">sha256:156c35decf5d5ea65156111c2bbc2e56930d0f56d0d56520fa047c81cbb1179e</span><br><span class="line">[root@localhost test]# docker images</span><br><span class="line">REPOSITORY               TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line"><span class="meta">#</span><span class="bash">tomcat_prime             1.0       156c35decf5d   5 seconds ago   684MB</span></span><br><span class="line">tomcat                   latest    b00440a36b99   6 days ago      680MB</span><br><span class="line">nginx                    latest    12766a6745ee   9 days ago      142MB</span><br><span class="line">portainer/portainer-ce   2.11.1    ed396c816a75   8 weeks ago     280MB</span><br><span class="line">portainer/portainer-ce   latest    ed396c816a75   8 weeks ago     280MB</span><br><span class="line">hello-world              latest    feb5d9fea6a5   6 months ago    13.3kB</span><br><span class="line">centos                   latest    5d0da3dc9764   6 months ago    231MB</span><br></pre></td></tr></table></figure><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><p><strong>挂载数据卷</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# docker run -it --name centos7 -v /home/test:/home centos /bin/bash</span><br></pre></td></tr></table></figure><h2 id="实战：docker-安装mysql"><a href="#实战：docker-安装mysql" class="headerlink" title="实战：docker 安装mysql"></a>实战：docker 安装mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql --name mysql -e MYSQL_ROOT_PASSWORD=343621  mysql:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 挂载配置文件和数据文件</span></span><br></pre></td></tr></table></figure><h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">具名挂载</span></span><br><span class="line">docker run --name nginx05 -d -P -v juming-nginx:/etc/nginx nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询数据卷，匿名数据卷是随机字符串，具名数据卷是有名字的</span></span><br><span class="line">[root@localhost conf.d]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     071c733fcd2db97f0aee68cf338d2ec49f344670b029cd6173c8b247dee33736</span><br><span class="line">local     6694db8ec1e0347998c2b744c40fa4cce16490600da539ca6759c9b54eb0e5af</span><br><span class="line">local     a4ca0c940bb15e60c655a7d97753d2745783a3db3a6687ec16b4dd8acee86449</span><br><span class="line">local     juming-nginx</span><br><span class="line">local     portainer_data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看卷详情</span></span><br><span class="line">[root@localhost conf.d]# docker volume inspect juming-nginx </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2022-04-11T16:30:14+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;juming-nginx&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta">#</span><span class="bash"> Mountpoint 是数据卷在宿主机上的位置</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#数据卷挂载：</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">具名挂载</span></span><br><span class="line"><span class="meta">#</span><span class="bash">匿名挂载</span></span><br><span class="line"><span class="meta">#</span><span class="bash">指定路径挂载</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 指定宿主机读取权限</span></span></span><br><span class="line">:roreadonly</span><br><span class="line">:rwreadwrite</span><br><span class="line">docker run --name nginx05 -d -P -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run --name nginx05 -d -P -v juming-nginx:/etc/nginx:rw nginx</span><br></pre></td></tr></table></figure><h2 id="dockerFile"><a href="#dockerFile" class="headerlink" title="dockerFile"></a>dockerFile</h2><p>dockerfile 就是用来创建镜像的</p><h2 id="dockerFile构建镜像时进行卷挂载"><a href="#dockerFile构建镜像时进行卷挂载" class="headerlink" title="dockerFile构建镜像时进行卷挂载"></a>dockerFile构建镜像时进行卷挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile  文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加的挂载卷，在根目录中</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [&quot;v01&quot;, &quot;v02&quot;]</span><br><span class="line"></span><br><span class="line">CMD echo &quot;----end-----&quot;</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行创建命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -f文件位置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -t创建的镜像名：版本号</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 必须要加上 .</span></span><br><span class="line">docker build -f dockfile1 -t wangzhe/centos:1.0 .</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">在宿主机中卷是匿名数据卷</span></span><br><span class="line">1. 使用 docker inspect container   找mount</span><br><span class="line">2. 使用 docker volume inspect  vid  找到挂载路径</span><br><span class="line">3. </span><br></pre></td></tr></table></figure><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>多个容器之间同步数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--volumes-from containerid</span><br></pre></td></tr></table></figure><h2 id="mysql数据共享"><a href="#mysql数据共享" class="headerlink" title="mysql数据共享"></a>mysql数据共享</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql01 -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=343621 mysql:latest</span><br><span class="line">docker run --name mysql01 -d -p 3311:3306 --volumes-from mysql01 -e MYSQL_ROOT_PASSWORD=343621 mysql:latest</span><br></pre></td></tr></table></figure><h1 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h1><h2 id="dockerfile-指令"><a href="#dockerfile-指令" class="headerlink" title="dockerfile 指令"></a>dockerfile 指令</h2><ul><li>所有指令必须大写</li><li>指令从上到下执行</li><li>每条指令都是一层镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM container[centos,nginx]#声明父镜像</span><br><span class="line">MAINTAINER  姓名+邮箱 #声明维护者</span><br><span class="line">RUN #镜像构建的时候执行的一些命令</span><br><span class="line">ADD#添加其他镜像，tomcat，jdk，nginx之类的压缩包，会自动解压</span><br><span class="line">WORKDIR#工作目录，进入bash后的所在目录【centos默认是/】</span><br><span class="line">VOLUME#挂载的目录</span><br><span class="line">EXPOSE#暴露的端口配置</span><br><span class="line">CMD#启动容器的时候执行，只会执行最后一条cmd命令，可以被替换但不能被追加</span><br><span class="line">ENTRYPOINT#指定容器启动的时候执行的命令，可以追加命令</span><br><span class="line">ONBUILD#当构建一个被继承的dockfile时，会执行</span><br><span class="line">COPY#类似于add，将我们的文件拷贝到镜像中去</span><br><span class="line">ENV#构建的时候设置的环境变量，构件时传递的参数</span><br></pre></td></tr></table></figure><h2 id="构建my-centos"><a href="#构建my-centos" class="headerlink" title="构建my-centos"></a>构建my-centos</h2><p>在基础镜像上添加 vim和ipconfig功能，体验dockerfile的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER wangzhe&lt;2546972682@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line"></span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo ----end----</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">构建</span></span><br><span class="line">docker build -f dockerfile-centos -t dockerfile-centos:1.0 .</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">工作目录 和 ifconfig命令可以使用</span></span><br><span class="line">[root@localhost test-dockfile]# docker run -it --name dockfilecentos  23376f473200</span><br><span class="line">[root@536088d44218 local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@536088d44218 local]# ifconfig</span><br></pre></td></tr></table></figure><h2 id="CMD-与-ENTRYPOINT-区别"><a href="#CMD-与-ENTRYPOINT-区别" class="headerlink" title="CMD  与 ENTRYPOINT 区别"></a>CMD  与 ENTRYPOINT 区别</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">cmd  会在运行容器时运行最后一条命令，可以被替换，但不能追加</span><br><span class="line">entrypoint  会在运行容器时运行，可以在后面追加命令</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">cmd  执行 ls -a命令</span></span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"></span><br><span class="line">[root@localhost test]# docker run 0d1a612596fa</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">。。。</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#添加 -l 参数</span></span></span><br><span class="line">[root@localhost test]# docker run 0d1a612596fa -l</span><br><span class="line">docker: Error response from daemon: failed to create shim: OCI runtime create failed: container_linux.go:380: starting container process caused: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#需要在后面添加完整的命令</span></span></span><br><span class="line">[root@localhost test]# docker run 0d1a612596fa ls -al</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x.   1 root root   6 Apr 12 07:37 .</span><br><span class="line">drwxr-xr-x.   1 root root   6 Apr 12 07:37 ..</span><br><span class="line">-rwxr-xr-x.   1 root root   0 Apr 12 07:37 .dockerenv</span><br><span class="line">lrwxrwxrwx.   1 root root   7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x.   5 root root 340 Apr 12 07:37 dev</span><br><span class="line">drwxr-xr-x.   1 root root  66 Apr 12 07:37 etc</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx.   1 root root   7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------.   2 root root   6 Sep 15  2021 lost+found</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x. 250 root root   0 Apr 12 07:37 proc</span><br><span class="line">dr-xr-x---.   2 root root 162 Sep 15  2021 root</span><br><span class="line">drwxr-xr-x.  11 root root 163 Sep 15  2021 run</span><br><span class="line">lrwxrwxrwx.   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x.  13 root root   0 Apr 11 07:11 sys</span><br><span class="line">drwxrwxrwt.   7 root root 171 Sep 15  2021 tmp</span><br><span class="line">drwxr-xr-x.  12 root root 144 Sep 15  2021 usr</span><br><span class="line">drwxr-xr-x.  20 root root 262 Sep 15  2021 var</span><br></pre></td></tr></table></figure><p><strong>entrypoint命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# docker run 1dc871c9c046</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">。。。。</span><br><span class="line">[root@localhost test]# docker run 1dc871c9c046 -l</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x.   1 root root   6 Apr 12 07:39 .</span><br><span class="line">drwxr-xr-x.   1 root root   6 Apr 12 07:39 ..</span><br><span class="line">-rwxr-xr-x.   1 root root   0 Apr 12 07:39 .dockerenv</span><br><span class="line">lrwxrwxrwx.   1 root root   7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">。。。。。</span><br></pre></td></tr></table></figure><h2 id="实战tomcat"><a href="#实战tomcat" class="headerlink" title="实战tomcat"></a>实战tomcat</h2><p>dockerfile文件以<code>Dockerfile</code>命名，是标准的名字，在构建的时候就不需要加-f</p><p><strong># tomcat 目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">需要准备tomcat和jdk的压缩文件，使用add命令添加时会自动解压</span></span><br><span class="line">[root@localhost tomcat]# ll</span><br><span class="line">总用量 155024</span><br><span class="line">drwxr-xr-x. 9 root  root        220 4月  12 16:41 apache-tomcat-10.0.20</span><br><span class="line">-rw-r--r--. 1 root  root   11915655 4月  12 16:38 apache-tomcat-10.0.20.tar.gz</span><br><span class="line">-rw-r--r--. 1 root  root        653 4月  12 16:50 Dockerfile</span><br><span class="line">drwxr-xr-x. 8 10143 10143       273 12月 16 03:30 jdk1.8.0_321</span><br><span class="line">-rw-r--r--. 1 root  root  146815279 4月  12 16:36 jdk-8u321-linux-x64.tar.gz</span><br><span class="line">-rw-r--r--. 1 root  root          7 4月  12 16:31 readme.txt</span><br></pre></td></tr></table></figure><p><strong>#Dockerfile文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcat]# cat Dockerfile </span><br><span class="line">FROM centos:centos7</span><br><span class="line"></span><br><span class="line">MAINTAINER wangzhe&lt;2546972682@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD apache-tomcat-10.0.20.tar.gz /usr/local/</span><br><span class="line">ADD jdk-8u321-linux-x64.tar.gz /usr/local</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line"></span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_321</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-10.0.20</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-10.0.20</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-10.0.20/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-10.0.20/bin/logs/catalina.out</span><br></pre></td></tr></table></figure><p><strong>镜像构建及运行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像不用添加-f</span></span><br><span class="line">docker build -t diy-centos:1.0 .</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像</span></span><br><span class="line">docker run -d -p 9090:8080 --name wangzhetomcat -v /home/admin/build/tomcat/test:/usr/local/apache-tomcat-10.0.20/webapps/test \</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> -v /home/admin/build/tomcat/tomcatlogs/:/usr/<span class="built_in">local</span>/apache-tomcat-10.0.20/logs diy-centos:1.0</span> </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在挂载<span class="built_in">test</span>目录中添加项目信息</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试地址</span></span><br><span class="line">192.168.112.128:9090</span><br><span class="line">192.168.112.128:9090/test</span><br></pre></td></tr></table></figure><h2 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h2><h3 id="发布到-hub-docker-com"><a href="#发布到-hub-docker-com" class="headerlink" title="发布到 hub.docker.com"></a>发布到 hub.docker.com</h3><p><strong>1.登录网站</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u account -p password</span><br></pre></td></tr></table></figure><p><strong>2.push</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost .docker]# docker push 15296797459/diycentos:1.0</span><br><span class="line">The push refers to repository [docker.io/15296797459/diycentos]</span><br><span class="line">174b635a5058: Pushed </span><br><span class="line">9f7ffe7837ee: Pushed </span><br><span class="line">34ee798fa05a: Pushed </span><br><span class="line">e7f006c9c590: Pushed </span><br><span class="line">174f56854903: Pushed </span><br><span class="line">1.0: digest: sha256:6876bab1fe0fdc9d83bcbbaac25cc744f0eca5a87a4a64179613e193b91da675 size: 1373</span><br></pre></td></tr></table></figure><h3 id="发布镜像到阿里云容器镜像服务"><a href="#发布镜像到阿里云容器镜像服务" class="headerlink" title="发布镜像到阿里云容器镜像服务"></a>发布镜像到阿里云容器镜像服务</h3><p><strong>…</strong></p><h1 id="docker-网络"><a href="#docker-网络" class="headerlink" title="docker 网络"></a>docker 网络</h1><p><strong>查看网络</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:d2:b1:f9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.112.128/24 brd 192.168.112.255 scope global noprefixroute dynamic ens33</span><br><span class="line">       valid_lft 1563sec preferred_lft 1563sec</span><br><span class="line">    inet6 fe80::d86c:8784:85bc:385d/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:06:40:cc brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:06:40:cc brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:b8:de:8e:fb brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="meta">#</span><span class="bash">docker0 是docker的网卡</span></span><br><span class="line"><span class="meta">#</span><span class="bash">每个容器都对应一个网卡</span></span><br></pre></td></tr></table></figure><p>**启动容器后的ip addr **</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">容器启动后会多出一个网卡</span></span><br><span class="line">7: veth6ce638d@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether e2:82:63:8d:f9:d2 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::e082:63ff:fe8d:f9d2/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta">#</span><span class="bash">通过docker inspect containerid 查看容器 ip地址</span></span><br><span class="line"> &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;fbf8f5976927865501758b0bfffb8f6d9b3ded6b1866d7930fbc9d9e49dc1ade&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;70dee68966da2ee89e5c29d55f358c92c153db0bb239379193e4a79a636ff78e&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;fbf8f5976927865501758b0bfffb8f6d9b3ded6b1866d7930fbc9d9e49dc1ade&quot;,</span><br><span class="line">                    </span><br><span class="line"> </span><br></pre></td></tr></table></figure><blockquote><p>docker0是所有容器的网关，多有容器都与docker0是同一网段</p></blockquote><p>不同容器之间是可以相互 ping 通的</p><h2 id="实现ping容器名来连通"><a href="#实现ping容器名来连通" class="headerlink" title="实现ping容器名来连通"></a>实现ping容器名来连通</h2><p><strong>–link</strong></p><blockquote><p>这种方式已经不流行了</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用link链接后可以直接使用容器名称来ping</span></span><br><span class="line">docker run -d -it -P --name tomcat02 --link tomcat01 tomcat</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --link 的本质是：在/etc/hosts 文件中添加映射</span></span><br><span class="line"><span class="meta">#</span><span class="bash">172.17.0.2      tomcat01 3cbc794672f4</span></span><br><span class="line"></span><br><span class="line">[root@localhost /]# docker exec -it tomcat02 cat /etc/hosts</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.2      tomcat01 3cbc794672f4</span><br><span class="line">172.17.0.3      70a222b7a8a2</span><br></pre></td></tr></table></figure><h2 id="docker自定义网络"><a href="#docker自定义网络" class="headerlink" title="docker自定义网络"></a>docker自定义网络</h2><p><strong>容器互联</strong></p><blockquote><p>网络模式</p></blockquote><p><strong>创建网络</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker network create -d bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">cac186e0f9036603661970829a8d7efd14564db2a5e7c0687a402e7cde593307</span><br><span class="line">[root@localhost /]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">70dee68966da   bridge    bridge    local</span><br><span class="line">2bafb20418b7   host      host      local</span><br><span class="line">cac186e0f903   mynet     bridge    local</span><br><span class="line">febb418c2c60   none      null      local</span><br><span class="line"></span><br><span class="line">[root@localhost /]# docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;cac186e0f9036603661970829a8d7efd14564db2a5e7c0687a402e7cde593307&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-04-13T15:11:40.89222403+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>容器使用自定义网络</strong></p><p><strong>–net mynet</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker run --name centos02 -d -it --net mynet centos</span><br><span class="line"></span><br><span class="line">[root@localhost /]# docker network inspect mynet </span><br><span class="line"></span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;3dd7a67c4fca04d2a24d876195260c7e494a72c03af31695ea54e4f30080b33d&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;centos01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;37cd1c3199bc6a386efccff45523609f38cc30063f4e6de9f94ce63c49a2c4e6&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ef58a6b1a377f6516838a00477bee0d6fbef56757dd684d7726e9632df2d00d9&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;centos02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;3cba83a82663a555c7a7b3c8c12c01e71d8fddb077d4e97d63ad8cbb49b52f97&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">ping centos02</span><br><span class="line">pong</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><p>本质上是将容器添加到目标网络中去</p><p><strong>docker network connect</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect network container</span><br></pre></td></tr></table></figure><h1 id="实战：部署redis集群"><a href="#实战：部署redis集群" class="headerlink" title="实战：部署redis集群"></a>实战：部署redis集群</h1><h1 id="springboot微服务打包"><a href="#springboot微服务打包" class="headerlink" title="springboot微服务打包"></a>springboot微服务打包</h1><h1 id="常见的坑"><a href="#常见的坑" class="headerlink" title="常见的坑"></a>常见的坑</h1><p><strong>docker run 之后发现容器停止了</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker run image; 如果容器没有启动前台程序，docker没有发现应用，就会自动停止，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nginx 启动后，发现自己没有程序，就会停止运行</span></span><br></pre></td></tr></table></figure><p><strong>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the d</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启服务</span></span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure><p><strong>推送到hub.docker.com遇到的问题</strong></p><blockquote><p> denied: requested access to the resource is denied</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker push diy-tomcat:1.0</span><br><span class="line">The push refers to repository [docker.io/library/diy-tomcat]</span><br><span class="line">174b635a5058: Preparing </span><br><span class="line">9f7ffe7837ee: Preparing </span><br><span class="line">34ee798fa05a: Preparing </span><br><span class="line">e7f006c9c590: Waiting </span><br><span class="line">174f56854903: Waiting </span><br><span class="line">denied: requested access to the resource is denied</span><br><span class="line"></span><br><span class="line">原因：push的镜像应该是account/imagesname:version</span><br><span class="line">push 15296797459/diytomcat:version</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker学习记录</summary>
    
    
    
    <category term="Docker" scheme="http://wang_zhe343621.gitee.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://wang_zhe343621.gitee.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudAlibaba学习记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/03/24/SpringCloudAlibaba%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/03/24/SpringCloudAlibaba%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2022-03-24T07:28:42.000Z</published>
    <updated>2023-04-02T18:51:29.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><p><a href="https://github.com/alibaba/nacos">官网</a></p><h2 id="nacos-的安装启动"><a href="#nacos-的安装启动" class="headerlink" title="nacos 的安装启动"></a>nacos 的安装启动</h2><p><a href="https://github.com/alibaba/nacos/releases">下载地址</a></p><p><strong>启动命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nacos/bin  <span class="comment">#进入bin目录</span></span><br><span class="line">sh startup.sh -m standalone <span class="comment">#standalone代表单机运行，非集群模式</span></span><br></pre></td></tr></table></figure><p><a href="http://192.168.112.128:8848/nacos/index.html">访问地址</a></p><h2 id="服务发现-基本使用"><a href="#服务发现-基本使用" class="headerlink" title="服务发现-基本使用"></a>服务发现-基本使用</h2><h4 id="生产者配置"><a href="#生产者配置" class="headerlink" title="生产者配置"></a>生产者配置</h4><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yaml 配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-nacos-provider</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.112</span><span class="number">.128</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>启动类配置使用<code>@EnableDiscoveryClient</code> 注解</p></li></ol><h4 id="消费者配置"><a href="#消费者配置" class="headerlink" title="消费者配置"></a>消费者配置</h4><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里使用loadbalancer 做负载均衡--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yaml 配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-nacos-consumer</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.112</span><span class="number">.128</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://cloud-nacos-provider</span></span><br></pre></td></tr></table></figure></li><li><p>手动注入restTemplate,在启动类上配置<code>@EnableDiscoveryClient</code>注解</p></li></ol><h2 id="配置中心-基本使用"><a href="#配置中心-基本使用" class="headerlink" title="配置中心-基本使用"></a>配置中心-基本使用</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--必须添加这个依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>bootstrap.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-nacos-config</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.112</span><span class="number">.128</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.112</span><span class="number">.128</span><span class="string">:8848</span> <span class="comment"># 配置nacos config server地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#配置文件的扩展名，默认为properties</span></span><br><span class="line"><span class="attr">refresh-enabled:</span> <span class="literal">true</span> <span class="comment"># 自动刷新默认开启，如果要关闭设置为false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 会到服务器的default namespace -&gt; DEFAULT_GROUP -&gt; cloud-nacos-config.yaml 的文件       </span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="配置自动刷新"><a href="#配置自动刷新" class="headerlink" title="配置自动刷新"></a>配置自动刷新</h3><ol><li><code>cloud.nacos.config.refresh-enabled=true</code> 默认就是开启的。</li><li>在需要刷新的类上添加<code>@RefreshScope</code> 注解</li></ol><h3 id="profile粒度配置"><a href="#profile粒度配置" class="headerlink" title="profile粒度配置"></a>profile粒度配置</h3><p>关于粒度的配置必须放在<code>bootstrap.yaml</code>文件里面</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>测试后，放在<code>普通的application.yaml</code>文件里面也可以生效</p><h3 id="namespace-和-group-自定义配置"><a href="#namespace-和-group-自定义配置" class="headerlink" title="namespace 和 group 自定义配置"></a>namespace 和 group 自定义配置</h3><p><strong>namespace</strong>配置</p><ol><li><p>创建命名空间</p><p><img src="/.io//image-20220325152453581.png" alt="image-20220325152453581"></p></li><li><p>添加配置在自定义命名空间下</p><p><img src="/.io//image-20220325152617200.png" alt="image-20220325152617200"></p></li><li><p>bootstrap.yaml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">      <span class="comment">#配置命名空间</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">7ab3b839-b579-402c-992b-bb2ea46a7172</span></span><br><span class="line">        <span class="comment">#配置分组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">TEST_GROUP</span> </span><br></pre></td></tr></table></figure></li></ol><h3 id="dataid-扩展"><a href="#dataid-扩展" class="headerlink" title="dataid 扩展"></a>dataid 扩展</h3><p>这里不做详细介绍，用到的话，去官网查怎么用</p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config">官网</a></p><h3 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h3><p>Spring Cloud Alibaba Nacos Config 目前提供了三种配置能力从 Nacos 拉取相关的配置。</p><ul><li>A: 通过 <code>spring.cloud.nacos.config.shared-configs[n].data-id</code> 支持多个共享 Data Id 的配置</li><li>B: 通过 <code>spring.cloud.nacos.config.extension-configs[n].data-id</code> 的方式支持多个扩展 Data Id 的配置</li><li>C: 通过内部相关规则(应用名、应用名+ Profile )自动生成相关的 Data Id 配置</li></ul><p>当三种方式共同使用时，他们的一个优先级关系是:A &lt; B &lt; C</p><h3 id="关闭nacos-config功能"><a href="#关闭nacos-config功能" class="headerlink" title="关闭nacos-config功能"></a>关闭nacos-config功能</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.config.enabled</span> = <span class="string">false</span></span><br></pre></td></tr></table></figure><h2 id="nacos集群"><a href="#nacos集群" class="headerlink" title="nacos集群"></a>nacos集群</h2><h1 id="sentinel"><a href="#sentinel" class="headerlink" title="sentinel"></a>sentinel</h1><h2 id="Sentinel控制台"><a href="#Sentinel控制台" class="headerlink" title="Sentinel控制台"></a>Sentinel控制台</h2><p><a href="https://github.com/alibaba/Sentinel/releases">sentinel控制台下载链接</a></p><p>控制台启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认是8080端口</span></span><br><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>控制台是懒加载的，只有当你访问一次应用后，控制台才会显示该引用的信息。</p><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yaml 配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.112</span><span class="number">.128</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span> <span class="comment">#尝试端口，会从8719开始尝试，不行就+1</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment">#配置控制台的地址</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="限流规则"><a href="#限流规则" class="headerlink" title="限流规则"></a>限流规则</h2><h2 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h2><p>在条件满足后，会熔断，超过熔断时间后，会慢慢放行。</p><h2 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h2><p>需要配置blockerhandler，错误信息自定义</p><p>如果不添加，默认显示的是程序的错误信息。</p><p>只有qps一种检验方式，是检验方法参数的次数，只要带了那个参数就会被计算进入检验，第几个参数应该是通过在方法上的生命顺序确定的。</p><p>必须使用<code>@SentinelResource(value = &quot;testHostKey&quot;)</code>,不添加这个在路径上添加热点规则，不生效的。</p><p>参数是从0开始</p><p>限流不处理程序异常错误，他只会处理不满足规则的错误。</p><p>熔断处理程序异常错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHostKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHostKey&quot;,blockHandler = &quot;testHostKeyHandler&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHostKey</span><span class="params">(<span class="meta">@RequestParam(name = &quot;p1&quot;,required = false)</span> String p1,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(name = &quot;p2&quot;, required = false)</span> String p2)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;testHostKey:&quot;</span> + p1 + <span class="string">&quot;, &quot;</span> + p2);</span><br><span class="line">    <span class="comment">//        int i = 10/0;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testHostKey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHostKeyHandler</span><span class="params">(String p1, String p2, BlockException e)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;testHostKey:&quot;</span> + p1 + <span class="string">&quot;, &quot;</span> + p2);</span><br><span class="line">    System.out.println(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testHostKeyHandler 苦苦&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h2><h2 id="sentinelResource-注解的name可以和路径相同吗"><a href="#sentinelResource-注解的name可以和路径相同吗" class="headerlink" title="@sentinelResource 注解的name可以和路径相同吗"></a>@sentinelResource 注解的name可以和路径相同吗</h2><p><a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81">sentinelresource注解官网</a></p><p>fallback，相当于hystrix中的服务降级，用于处理程序异常时的兜底方法。</p><p>blockhandler,处理sentinel控制台违规异常</p><p>exceptionToIgnore ,会忽略异常，因此不会走fallback方法，但是仍然会被计算进入控制台规则中。</p><blockquote><p>情况一：</p></blockquote><p>当配置了fallback 和 blockhandler,两种配置同时生效，最后显示的是blockhandler的配置。</p><h2 id="sentinel-整合-rest-balancer"><a href="#sentinel-整合-rest-balancer" class="headerlink" title="sentinel 整合 rest+balancer"></a>sentinel 整合 rest+balancer</h2><p>因为ribbon现在已经被弃用，所以这里使用rest+balancer,</p><p>这里使用和demo中的没有什么不同，重点看下接下来整合openfeign的配置。</p><h2 id="sentinel-整合openFeign"><a href="#sentinel-整合openFeign" class="headerlink" title="sentinel 整合openFeign"></a>sentinel 整合openFeign</h2><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel">官网</a></p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># feign 开启对 sentinel 的支持</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h2><p>之前的限流规则是临时的，应用重启后，配置的规则就会消失。</p><p>官方推荐持久化到nacos中。</p><p>这个持久化不是sentinel中的配置保存到nacos中，而是在nacos中保存信息，sentinel去读取，所以在sentinel中对规则的修改不会持保存到nacos中。</p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yaml 配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.112</span><span class="number">.128</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.112</span><span class="number">.128</span><span class="string">:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>在nacos配置中心中添加配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">文件的dataId,groupId,文件类型和yaml配置文件中的相同。</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="attr">&quot;resource&quot;</span>:<span class="string">&quot;/rateLimit/byUrl&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;limitApp&quot;</span>:<span class="string">&quot;default&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;grade&quot;</span>:<span class="number">1</span>,</span><br><span class="line">         <span class="attr">&quot;count&quot;</span>:<span class="number">1</span>,</span><br><span class="line">         <span class="attr">&quot;strategy&quot;</span>:<span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;controlBehavior&quot;</span>:<span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;clusterMode&quot;</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置信息的解释：</p><p>resource: 资源名称<br> limitApp: 来源应用<br> grade: 阈值类型,0表示线程,1表示QPS<br> count: 单机阈值<br> strategy: 流控模式,0表示直接,1表示关联,2表示链路<br> controlBehavior: 流控效果,0表示快速失败,1表示Warm Up,2表示排队等待<br> clusterMode: 是否集群</p><h1 id="seata"><a href="#seata" class="headerlink" title="seata"></a>seata</h1><p>alibaba 解决分布式事务的 一套框架。</p><p><a href="https://seata.io/zh-cn/docs/user/quickstart.html">seata官网</a></p><p><a href="https://www.jb51.net/article/202333.htm">seata1.4使用教程</a></p></li></ol>]]></content>
    
    
    <summary type="html">SpringCloudAlibaba学习记录</summary>
    
    
    
    <category term="SpringCloud" scheme="http://wang_zhe343621.gitee.io/categories/SpringCloud/"/>
    
    <category term="SpringCloudAlibaba" scheme="http://wang_zhe343621.gitee.io/categories/SpringCloud/SpringCloudAlibaba/"/>
    
    
    <category term="SpringCloudAlibaba" scheme="http://wang_zhe343621.gitee.io/tags/SpringCloudAlibaba/"/>
    
    <category term="SpringCloud" scheme="http://wang_zhe343621.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/03/10/Zookeeper%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/03/10/Zookeeper%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2022-03-10T02:23:06.000Z</published>
    <updated>2023-04-02T18:51:30.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础了解和工具使用"><a href="#基础了解和工具使用" class="headerlink" title="基础了解和工具使用"></a>基础了解和工具使用</h1><blockquote><p>pretty zoo工具使用</p></blockquote><p><a href="https://github.com/vran-dev/PrettyZoo">PrettyZoo下载地址</a></p><blockquote><p>知识点</p></blockquote><ul><li>Zookeeper的节点有声明周期，与节点类型有关</li><li>有四种节点类型</li></ul>]]></content>
    
    
    <summary type="html">Zookeeper使用记录</summary>
    
    
    
    <category term="Zookeeper" scheme="http://wang_zhe343621.gitee.io/categories/Zookeeper/"/>
    
    
    <category term="Zookeeper" scheme="http://wang_zhe343621.gitee.io/tags/Zookeeper/"/>
    
  </entry>
  
</feed>
