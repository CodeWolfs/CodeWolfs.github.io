<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Wolf</title>
  
  <subtitle>coding</subtitle>
  <link href="http://wang_zhe343621.gitee.io/atom.xml" rel="self"/>
  
  <link href="http://wang_zhe343621.gitee.io/"/>
  <updated>2024-01-27T18:29:15.046Z</updated>
  <id>http://wang_zhe343621.gitee.io/</id>
  
  <author>
    <name>Code Wolf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker-compose 使用</title>
    <link href="http://wang_zhe343621.gitee.io/2024/01/28/docker-compose-%E4%BD%BF%E7%94%A8/"/>
    <id>http://wang_zhe343621.gitee.io/2024/01/28/docker-compose-%E4%BD%BF%E7%94%A8/</id>
    <published>2024-01-27T18:18:04.000Z</published>
    <updated>2024-01-27T18:29:15.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li>yum 安装（版本很低）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-compose</span><br></pre></td></tr></table></figure></li><li>git 下载文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载文件</span></span><br><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 授权</span></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 添加 /usr/local/bin 的全局环境变量</span></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure></li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>配置文件包含三部分</p><ul><li>version</li><li>services</li><li>network</li></ul><h3 id="nginx-示例配置"><a href="#nginx-示例配置" class="headerlink" title="nginx 示例配置"></a>nginx 示例配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    image: nginx</span><br><span class="line">    container_name: blog_nginx</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80</span><br><span class="line">    volumes:</span><br><span class="line">      - ./nginx/nginx.conf:/etc/nginx/nginx.conf</span><br><span class="line">      - ./wang_zhe343621:/usr/share/nginx/html</span><br><span class="line">      - ./nginx/logs:/var/<span class="built_in">log</span>/nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ol><li>启动<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定配置文件开启，-d后台启动</span></span><br><span class="line">docker-compose -f [conf.file] up -d</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">docker-compose 使用</summary>
    
    
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/categories/docker/"/>
    
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/tags/docker/"/>
    
    <category term="docker-compose" scheme="http://wang_zhe343621.gitee.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>Linux 内核升级</title>
    <link href="http://wang_zhe343621.gitee.io/2024/01/27/Linux-%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7/"/>
    <id>http://wang_zhe343621.gitee.io/2024/01/27/Linux-%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7/</id>
    <published>2024-01-27T10:46:08.000Z</published>
    <updated>2024-01-27T11:26:40.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这一知识来源于开启 bbr3 <br><br><a href="http://elrepo.org/tiki/HomePage">内核更新官网</a></p><p><a href="https://youtu.be/rliQg3Z4i_8?si=c8BPAt7l54KQ6xop">bbr3 开启视频地址</a></p><p><a href="https://drive.google.com/file/d/1kt_AKvCi5X3uNlH3LVOXkGbXitz4KOOM/view">bbr3 原文档地址</a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li>更新系统和软件包：<br>yum update</li><li>查看系统版本：<br>[root@amber ~]# cat /etc/redhat-release</li><li>安装 elrepo 并升级内核：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">   yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</span><br><span class="line">   安装 kernel-ml 内核</span><br><span class="line">   yum --enablerepo=elrepo-kernel install kernel-m</span><br><span class="line">   ````</span><br><span class="line"></span><br><span class="line">4. 更新 grub 文件并重启系统：</span><br><span class="line">   ```bash</span><br><span class="line">   <span class="comment">#查看内核版本</span></span><br><span class="line">   uname -r</span><br><span class="line">   <span class="comment">#查看系统中所有可引导的内核版本：</span></span><br><span class="line">   egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   #设置我们 linux 系统启动后，加载并引导第一个内核</span></span><br><span class="line"><span class="string">   grub2-set-default 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   reboot</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li>重新查看内核版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure></li></ol><h1 id="开启-bbr"><a href="#开启-bbr" class="headerlink" title="开启 bbr"></a>开启 bbr</h1><ol><li>设置系统配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"><span class="comment"># 在文件末尾添加如下内容</span></span><br><span class="line">net.core.default_qdisc = fq</span><br><span class="line">net.ipv4.tcp_congestion_control = bb</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>加载系统参数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li><li>确定 bbr 已经成功开启： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">sysctl net.ipv4.tcp_available_congestion_control = reno cubic bbr</span><br><span class="line">[root@amber ~]<span class="comment"># lsmod | grep bbr</span></span><br><span class="line">tcp_bbr                20480  1</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">Linux 内核升级</summary>
    
    
    
    <category term="linux" scheme="http://wang_zhe343621.gitee.io/categories/linux/"/>
    
    
    <category term="linux" scheme="http://wang_zhe343621.gitee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>前端知识列表</title>
    <link href="http://wang_zhe343621.gitee.io/2023/10/10/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%88%97%E8%A1%A8/"/>
    <id>http://wang_zhe343621.gitee.io/2023/10/10/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%88%97%E8%A1%A8/</id>
    <published>2023-10-09T16:01:39.000Z</published>
    <updated>2023-10-13T10:37:39.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端知识列表"><a href="#前端知识列表" class="headerlink" title="前端知识列表"></a>前端知识列表</h1><p><a href="https://blog.csdn.net/u014061630/article/details/81359144?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169686741416800197027685%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169686741416800197027685&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81359144-null-null.142%5Ev95%5Econtrol&amp;utm_term=markdown%E8%AF%AD%E6%B3%95&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/u014061630/article/details/81359144?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169686741416800197027685%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169686741416800197027685&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81359144-null-null.142^v95^control&amp;utm_term=markdown%E8%AF%AD%E6%B3%95&amp;spm=1018.2226.3001.4187</a></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th align="center">名称</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">nvm</td><td align="center">管理多个版本的node</td></tr><tr><td align="center">animate.css</td><td align="center">css动画库</td></tr><tr><td align="center">greensock</td><td align="center">js 动画库</td></tr></tbody></table><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端知识列表&quot;&gt;&lt;a href=&quot;#前端知识列表&quot; class=&quot;headerlink&quot; title=&quot;前端知识列表&quot;&gt;&lt;/a&gt;前端知识列表&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u014061630/article/deta</summary>
      
    
    
    
    <category term="1" scheme="http://wang_zhe343621.gitee.io/categories/1/"/>
    
    
    <category term="1" scheme="http://wang_zhe343621.gitee.io/tags/1/"/>
    
  </entry>
  
  <entry>
    <title>vscode加载web视图，图片报错</title>
    <link href="http://wang_zhe343621.gitee.io/2023/04/04/vscode%E5%8A%A0%E8%BD%BDweb%E8%A7%86%E5%9B%BE%EF%BC%8C%E5%9B%BE%E7%89%87%E6%8A%A5%E9%94%99/"/>
    <id>http://wang_zhe343621.gitee.io/2023/04/04/vscode%E5%8A%A0%E8%BD%BDweb%E8%A7%86%E5%9B%BE%EF%BC%8C%E5%9B%BE%E7%89%87%E6%8A%A5%E9%94%99/</id>
    <published>2023-04-04T04:06:20.000Z</published>
    <updated>2023-04-04T04:47:14.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode加载web-视图，报错-“Error-Could-not-register-serviceworkers-InvalidstateError-Failed-to-regist“"><a href="#vscode加载web-视图，报错-“Error-Could-not-register-serviceworkers-InvalidstateError-Failed-to-regist“" class="headerlink" title="vscode加载web 视图，报错:“Error: Could not register serviceworkers: InvalidstateError: Failed to regist“"></a>vscode加载web 视图，报错:“Error: Could not register serviceworkers: InvalidstateError: Failed to regist“</h1><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><ol><li>关闭vscode</li><li><code>win+r</code> 打开cmd<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code --no-sandbox</span><br></pre></td></tr></table></figure>会重启vscode，就可以查看了</li></ol><h2 id="引用文献"><a href="#引用文献" class="headerlink" title="引用文献"></a>引用文献</h2><p>[1] <a href="https://blog.csdn.net/m0_58724783/article/details/127879777?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-5-127879777-blog-125405459.235%5Ev27%5Epc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-5-127879777-blog-125405459.235%5Ev27%5Epc_relevant_multi_platform_whitelistv3&utm_relevant_index=5">vscode加载web 视图</a></p>]]></content>
    
    
    <summary type="html">vscode 不能查看图片</summary>
    
    
    
    <category term="problem" scheme="http://wang_zhe343621.gitee.io/categories/problem/"/>
    
    <category term="software" scheme="http://wang_zhe343621.gitee.io/categories/problem/software/"/>
    
    <category term="vscode" scheme="http://wang_zhe343621.gitee.io/categories/problem/software/vscode/"/>
    
    
    <category term="vscode" scheme="http://wang_zhe343621.gitee.io/tags/vscode/"/>
    
    <category term="problem" scheme="http://wang_zhe343621.gitee.io/tags/problem/"/>
    
  </entry>
  
  <entry>
    <title>centos7 安装runlike(docker查看容器启动命令)</title>
    <link href="http://wang_zhe343621.gitee.io/2023/04/02/centos7-%E5%AE%89%E8%A3%85runlike-docker%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://wang_zhe343621.gitee.io/2023/04/02/centos7-%E5%AE%89%E8%A3%85runlike-docker%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-04-02T10:45:19.000Z</published>
    <updated>2023-04-02T18:51:30.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7-安装runlike"><a href="#centos7-安装runlike" class="headerlink" title="centos7 安装runlike"></a>centos7 安装runlike</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>centos7 | python2.7 | Docker version 20.10.17</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>yum -y install epel-release</li><li>yum install -y python-pip</li><li>pip install runlike 这一步报错:<br><img src="/.io//pip-install-upgrade%E5%91%BD%E4%BB%A4.png" alt="pip install runlike报错"><br>根据提示运行命令 pip install –upgrade pip  无效，还是报错</li></ol><p><strong><font size="4">解决方法</font></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line">pip install runlike</span><br></pre></td></tr></table></figure><h2 id="引用文献"><a href="#引用文献" class="headerlink" title="引用文献"></a>引用文献</h2><p>[1] <a href="https://www.dianjilingqu.com/177835.html">Centos7-安装runlike用来查看docker容器启动时候的参数</a></p>]]></content>
    
    
    <summary type="html">centos7 安装runlike(docker查看容器启动命令)</summary>
    
    
    
    <category term="install" scheme="http://wang_zhe343621.gitee.io/categories/install/"/>
    
    <category term="centos" scheme="http://wang_zhe343621.gitee.io/categories/install/centos/"/>
    
    <category term="install" scheme="http://wang_zhe343621.gitee.io/categories/install/centos/install/"/>
    
    
    <category term="centos7" scheme="http://wang_zhe343621.gitee.io/tags/centos7/"/>
    
    <category term="runlike" scheme="http://wang_zhe343621.gitee.io/tags/runlike/"/>
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker 常用命令使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2023/04/02/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2023/04/02/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2023-04-02T10:09:27.000Z</published>
    <updated>2023-04-02T18:54:49.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h1><ol><li><p>修改docker启动配置命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改nginx跟随系统重启</span></span><br><span class="line">docker update --restart=always nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">docker container update --restart=always nginx</span><br></pre></td></tr></table></figure></li><li><p>修改容器名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename [old(id or name)] [new name]</span><br></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [docker id or name] /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>退出容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> <span class="comment"># exit 退出 如果容器没有-d 后台运行，会直接关闭容器</span></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">ctrl + p + q <span class="comment"># 退出容器(-d 不影响)</span></span><br></pre></td></tr></table></figure></li><li><p>查看容器详情(不能重现启动命令)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect [docker id or name]</span><br></pre></td></tr></table></figure></li><li><p>查看容器的启动命令(runlike)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 python -&gt; pip -&gt; runlike</span></span><br><span class="line">runlike -p [docker id or name]</span><br><span class="line">...待写</span><br></pre></td></tr></table></figure><p><img src="/.io//docker-runlike-example.png" alt="runlike-example-result"></p></li><li><p>修改容器映射端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#temp </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="引用文献"><a href="#引用文献" class="headerlink" title="引用文献"></a>引用文献</h2><p>[1] <a href="https://liucy.blog.csdn.net/article/details/124511738?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-124511738-blog-122253638.235%5Ev27%5Epc_relevant_default_base1&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-124511738-blog-122253638.235%5Ev27%5Epc_relevant_default_base1&utm_relevant_index=1">docker修改容器的端口、容器名、映射地址</a></p>]]></content>
    
    
    <summary type="html">docker 常用命令</summary>
    
    
    
    <category term="command" scheme="http://wang_zhe343621.gitee.io/categories/command/"/>
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/categories/command/docker/"/>
    
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/tags/docker/"/>
    
    <category term="command" scheme="http://wang_zhe343621.gitee.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>docker-nginx安装</title>
    <link href="http://wang_zhe343621.gitee.io/2023/04/02/docker-nginx%E5%AE%89%E8%A3%85/"/>
    <id>http://wang_zhe343621.gitee.io/2023/04/02/docker-nginx%E5%AE%89%E8%A3%85/</id>
    <published>2023-04-02T09:30:23.000Z</published>
    <updated>2023-04-02T18:51:30.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker下安装nginx"><a href="#docker下安装nginx" class="headerlink" title="docker下安装nginx"></a>docker下安装nginx</h1><ol><li>下载镜像<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure></li><li>创建挂载卷<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/nginx/conf</span><br><span class="line">mkdir -p /data/nginx/<span class="built_in">log</span></span><br><span class="line">mkdir -p /data/nginx/html</span><br></pre></td></tr></table></figure></li><li>启动临时nginx容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-temp -p 80:80 -d nginx</span><br><span class="line"><span class="comment">#停止删除</span></span><br><span class="line">docker stop nginx-temp</span><br><span class="line">docker rm nginx-temp</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li><li>复制docker容器中的配置文件到宿主机上<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp nginx-temp:/etc/nginx/nginx.conf /data/nginx/conf/nginx.conf</span><br><span class="line">docker cp nginx-temp:/etc/nginx/conf.d /data/nginx/conf/conf.d</span><br><span class="line">docker cp nginx-temp:/usr/share/nginx/html /data/nginx/</span><br></pre></td></tr></table></figure></li><li>启动nginx容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 80:80 \</span><br><span class="line">--name nginx \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /data/nginx/conf/conf.d:/etc/nginx/conf.d \</span><br><span class="line">-v /data/nginx/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/nginx \</span><br><span class="line">-v /data/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-d nginx:latest</span><br></pre></td></tr></table></figure></li><li>修改容器启动配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置nginx自动启动</span></span><br><span class="line">docker update --restart=always nginx </span><br></pre></td></tr></table></figure></li><li>查看nginx 启动命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runlike -p nginx</span><br></pre></td></tr></table></figure></li></ol><h1 id="引用文献"><a href="#引用文献" class="headerlink" title="引用文献"></a>引用文献</h1><p>[1] <a href="https://www.dianjilingqu.com/177835.html">Centos7-安装runlike用来查看docker容器启动时候的参数</a></p>]]></content>
    
    
    <summary type="html">docker下安装nginx</summary>
    
    
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/categories/docker/"/>
    
    <category term="nginx" scheme="http://wang_zhe343621.gitee.io/categories/docker/nginx/"/>
    
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/tags/docker/"/>
    
    <category term="nginx" scheme="http://wang_zhe343621.gitee.io/tags/nginx/"/>
    
    <category term="install" scheme="http://wang_zhe343621.gitee.io/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>后端返参Long型-JS显示精度不准确</title>
    <link href="http://wang_zhe343621.gitee.io/2023/01/16/%E5%90%8E%E7%AB%AF%E8%BF%94%E5%8F%82Long%E5%9E%8B-JS%E6%98%BE%E7%A4%BA%E7%B2%BE%E5%BA%A6%E4%B8%8D%E5%87%86%E7%A1%AE/"/>
    <id>http://wang_zhe343621.gitee.io/2023/01/16/%E5%90%8E%E7%AB%AF%E8%BF%94%E5%8F%82Long%E5%9E%8B-JS%E6%98%BE%E7%A4%BA%E7%B2%BE%E5%BA%A6%E4%B8%8D%E5%87%86%E7%A1%AE/</id>
    <published>2023-01-16T08:21:01.000Z</published>
    <updated>2023-04-02T18:51:30.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后端返参Long型-JS显示精度不准确"><a href="#后端返参Long型-JS显示精度不准确" class="headerlink" title="后端返参Long型-JS显示精度不准确"></a>后端返参Long型-JS显示精度不准确</h1><blockquote><p>方法一</p></blockquote><p>后端返参转为String类型</p><blockquote></blockquote>]]></content>
    
    
    <summary type="html">后端返参Long型-JS显示精度不准确</summary>
    
    
    
    <category term="question" scheme="http://wang_zhe343621.gitee.io/categories/question/"/>
    
    
    <category term="JavaScript" scheme="http://wang_zhe343621.gitee.io/tags/JavaScript/"/>
    
    <category term="前端" scheme="http://wang_zhe343621.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="后端" scheme="http://wang_zhe343621.gitee.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="精度不准确" scheme="http://wang_zhe343621.gitee.io/tags/%E7%B2%BE%E5%BA%A6%E4%B8%8D%E5%87%86%E7%A1%AE/"/>
    
    <category term="Long" scheme="http://wang_zhe343621.gitee.io/tags/Long/"/>
    
  </entry>
  
  <entry>
    <title>itextpdf生成pdf使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/12/16/itextpdf%E7%94%9F%E6%88%90pdf%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/12/16/itextpdf%E7%94%9F%E6%88%90pdf%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-16T05:57:41.000Z</published>
    <updated>2023-04-02T18:51:30.029Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>BaseFont</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BaseFont baseChineseFont = BaseFont.createFont(<span class="string">&quot;STSong-Light&quot;</span>, <span class="string">&quot;UniGB-UCS2-H&quot;</span>, BaseFont.EMBEDDED);</span><br><span class="line"><span class="comment">//pdf字体名称，字体编码，pdf文本是否内嵌</span></span><br></pre></td></tr></table></figure><blockquote><p>Font</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">titlefont = <span class="keyword">new</span> Font(bfChinese, <span class="number">16</span>, Font.BOLD);</span><br><span class="line">headfont = <span class="keyword">new</span> Font(bfChinese, <span class="number">14</span>, Font.BOLD);</span><br><span class="line">keyfont = <span class="keyword">new</span> Font(bfChinese, <span class="number">10</span>, Font.BOLD);</span><br><span class="line">textfont = <span class="keyword">new</span> Font(bfChinese, <span class="number">10</span>, Font.NORMAL);</span><br><span class="line">Font font = <span class="keyword">new</span> Font(baseChineseFont, <span class="number">12</span>, Font.NORMAL,BaseColor.BLACK); <span class="comment">//basefont,font-size,font-style,font-color</span></span><br></pre></td></tr></table></figure><blockquote><p>Paragraph 段落</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//段落</span></span><br><span class="line">Paragraph paragraph = <span class="keyword">new</span> Paragraph(“”, titlefont); <span class="comment">//content,font</span></span><br><span class="line">paragraph.setAlignment(<span class="number">1</span>); <span class="comment">//设置文本对齐方式居中 0靠左 1，居中 2，靠右；正常靠左</span></span><br><span class="line">paragraph.setIndentationLeft(<span class="number">12</span>); <span class="comment">//设置左缩进</span></span><br><span class="line">paragraph.setIndentationRight(<span class="number">12</span>); <span class="comment">//设置右缩进</span></span><br><span class="line">paragraph.setFirstLineIndent(<span class="number">24</span>); <span class="comment">//设置首行缩进 24 是2个中文字符</span></span><br><span class="line">paragraph.setLeading(<span class="number">20f</span>); <span class="comment">//行间距</span></span><br><span class="line">paragraph.setSpacingBefore(<span class="number">5f</span>); <span class="comment">//设置段落上空白</span></span><br><span class="line">paragraph.setSpacingAfter(<span class="number">10f</span>); <span class="comment">//设置段落下空白</span></span><br><span class="line"><span class="comment">// 直线</span></span><br><span class="line">Paragraph p1 = <span class="keyword">new</span> Paragraph();</span><br><span class="line">p1.add(<span class="keyword">new</span> Chunk(<span class="keyword">new</span> LineSeparator()));</span><br><span class="line">————————————————</span><br><span class="line"><span class="comment">// 点线</span></span><br><span class="line">Paragraph p2 = <span class="keyword">new</span> Paragraph();</span><br><span class="line">p2.add(<span class="keyword">new</span> Chunk(<span class="keyword">new</span> DottedLineSeparator()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 超链接</span></span><br><span class="line">Anchor anchor = <span class="keyword">new</span> Anchor(<span class="string">&quot;baidu&quot;</span>);</span><br><span class="line">anchor.setReference(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定位</span></span><br><span class="line">Anchor gotoP = <span class="keyword">new</span> Anchor(<span class="string">&quot;goto&quot;</span>);</span><br><span class="line">gotoP.setReference(<span class="string">&quot;#top&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">itextpdf 使用记录</summary>
    
    
    
    <category term="itextpdf" scheme="http://wang_zhe343621.gitee.io/categories/itextpdf/"/>
    
    
    <category term="itextpdf" scheme="http://wang_zhe343621.gitee.io/tags/itextpdf/"/>
    
  </entry>
  
  <entry>
    <title>vite使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/12/06/vite%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/12/06/vite%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-06T05:58:54.000Z</published>
    <updated>2023-04-02T18:51:30.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多环境配置文件"><a href="#多环境配置文件" class="headerlink" title="多环境配置文件"></a>多环境配置文件</h1><p><a href="https://www.jianshu.com/p/1e85185796d8">参考链接</a></p>]]></content>
    
    
    <summary type="html">vite 使用记录</summary>
    
    
    
    <category term="vite" scheme="http://wang_zhe343621.gitee.io/categories/vite/"/>
    
    
    <category term="vite" scheme="http://wang_zhe343621.gitee.io/tags/vite/"/>
    
    <category term="vue" scheme="http://wang_zhe343621.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>swagger 使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/12/05/swagger-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/12/05/swagger-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-05T05:46:31.000Z</published>
    <updated>2023-04-02T18:51:30.032Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@ApiImplicitParam</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多文件上传</span></span><br><span class="line"><span class="meta">@ApiImplicitParam(name = &quot;files&quot;, value = &quot;多个文件&quot; , paramType = &quot;formData&quot;,allowMultiple=true,required = true,dataType = &quot;file&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通参数</span></span><br><span class="line"><span class="meta">@ApiImplicitParam(name = &quot;bucketName&quot;, value = &quot;存储桶&quot;,dataTypeClass = String.class, required = true ,allowMultiple=true)</span></span><br></pre></td></tr></table></figure><ul><li>paramType<ul><li>formData 表单</li><li>query </li><li>body 请求体</li></ul></li><li>dataType 数据类型 文件 是file</li><li>allowMultiple 多选，是List,ArrayList</li></ul><p><img src="/.io//image-20221205140144242.png" alt="image-20221205140144242"></p>]]></content>
    
    
    <summary type="html">swagger 使用记录</summary>
    
    
    
    <category term="swagger" scheme="http://wang_zhe343621.gitee.io/categories/swagger/"/>
    
    
    <category term="swagger" scheme="http://wang_zhe343621.gitee.io/tags/swagger/"/>
    
    <category term="springboot" scheme="http://wang_zhe343621.gitee.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>docker 命令及软件安装</title>
    <link href="http://wang_zhe343621.gitee.io/2022/12/02/docker-%E5%91%BD%E4%BB%A4%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>http://wang_zhe343621.gitee.io/2022/12/02/docker-%E5%91%BD%E4%BB%A4%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</id>
    <published>2022-12-02T03:25:06.000Z</published>
    <updated>2023-04-02T18:51:30.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h1><blockquote><p>查看docker容器日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f 容器id</span><br><span class="line">docker logs -f minio</span><br></pre></td></tr></table></figure><h1 id="docker-安装软件"><a href="#docker-安装软件" class="headerlink" title="docker 安装软件"></a>docker 安装软件</h1><h2 id="minio"><a href="#minio" class="headerlink" title="minio"></a>minio</h2><blockquote><p>命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart always -p 9000:9000 -p 9001:9001 --name minio -v /data/minio/data:/data -v /data/minio/config:/root/.minio -e <span class="string">&quot;MINIO_ROOT_USER=admin&quot;</span> -e <span class="string">&quot;MINIO_ROOT_PASSWORD=minioadmin&quot;</span> minio/minio server /data --console-address <span class="string">&quot;:9000&quot;</span> --address <span class="string">&quot;:9001&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>ak&amp;sk</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">minioadmin</span><br></pre></td></tr></table></figure><blockquote><p>成功日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@racknerd-9c2e31 minio]<span class="comment"># docker logs -f minio</span></span><br><span class="line">WARNING: MINIO_ACCESS_KEY and MINIO_SECRET_KEY are deprecated.</span><br><span class="line">         Please use MINIO_ROOT_USER and MINIO_ROOT_PASSWORD</span><br><span class="line">Formatting 1st pool, 1 <span class="built_in">set</span>(s), 1 drives per <span class="built_in">set</span>.</span><br><span class="line">WARNING: Host <span class="built_in">local</span> has more than 0 drives of <span class="built_in">set</span>. A host failure will result <span class="keyword">in</span> data becoming unavailable.</span><br><span class="line">Warning: Default parity <span class="built_in">set</span> to 0. This can lead to data loss.</span><br><span class="line">MinIO Object Storage Server</span><br><span class="line">Copyright: 2015-2022 MinIO, Inc.</span><br><span class="line">License: GNU AGPLv3 &lt;https://www.gnu.org/licenses/agpl-3.0.html&gt;</span><br><span class="line">Version: RELEASE.2022-11-29T23-40-49Z (go1.19.3 linux/amd64)</span><br><span class="line"></span><br><span class="line">Status:         1 Online, 0 Offline. </span><br><span class="line">API: http://172.17.0.6:9001  http://127.0.0.1:9001 </span><br><span class="line">Console: http://172.17.0.6:9000 http://127.0.0.1:9000 </span><br><span class="line"></span><br><span class="line">Documentation: https://min.io/docs/minio/linux/index.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">docker 命令及软件安装</summary>
    
    
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/categories/docker/"/>
    
    
    <category term="docker" scheme="http://wang_zhe343621.gitee.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Oracle 命令记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/11/24/Oracle-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/11/24/Oracle-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2022-11-24T10:32:41.000Z</published>
    <updated>2023-04-02T18:51:29.973Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>查询所有用户</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dba_users;</span><br></pre></td></tr></table></figure><blockquote><p>创建用户</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER blog IDENTIFIED BY blog;</span><br></pre></td></tr></table></figure><blockquote><p>用户赋权</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT CREATE SESSION TO blog;</span><br><span class="line">GRANT connect,resource TO blog;</span><br></pre></td></tr></table></figure><blockquote><p>查看用户权限</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user_sys_privs;//查看当前用户所有权限</span><br><span class="line"></span><br><span class="line">SELECT * FROM user_tab_privs;//查看所用用户对表的权限</span><br></pre></td></tr></table></figure><blockquote><p>修改用户密码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER system IDENTIFIED BY system;</span><br><span class="line"></span><br><span class="line">ALTER USER sys IDENTIFIED BY sys;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">oracle 语法记录</summary>
    
    
    
    <category term="oracle" scheme="http://wang_zhe343621.gitee.io/categories/oracle/"/>
    
    
    <category term="oracle" scheme="http://wang_zhe343621.gitee.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>PL/SQL 15注册码</title>
    <link href="http://wang_zhe343621.gitee.io/2022/08/17/PL-SQL-15%E6%B3%A8%E5%86%8C%E7%A0%81/"/>
    <id>http://wang_zhe343621.gitee.io/2022/08/17/PL-SQL-15%E6%B3%A8%E5%86%8C%E7%A0%81/</id>
    <published>2022-08-17T01:13:12.000Z</published>
    <updated>2023-04-02T18:51:29.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022-8-17-验证可用"><a href="#2022-8-17-验证可用" class="headerlink" title="2022/8/17 验证可用"></a>2022/8/17 验证可用</h1><p>进入帮助 -&gt; 注册，<br>输入：<br>产品编号：kfsvzt6zh2exaxzxgjk44rv5kp2yp68vgk<br>序列号：186220<br>口令：xs374ca</p><p>直接获得9999-12-31，美滋滋</p><p><a href="https://blog.csdn.net/weixin_42966484/article/details/112767709?spm=1001.2014.3001.5506">原文链接</a></p>]]></content>
    
    
    <summary type="html">PL/SQL 15注册码</summary>
    
    
    
    <category term="PLSQL" scheme="http://wang_zhe343621.gitee.io/categories/PLSQL/"/>
    
    
    <category term="PLSQL" scheme="http://wang_zhe343621.gitee.io/tags/PLSQL/"/>
    
    <category term="注册码" scheme="http://wang_zhe343621.gitee.io/tags/%E6%B3%A8%E5%86%8C%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>PLSQL安装并且连接远程库</title>
    <link href="http://wang_zhe343621.gitee.io/2022/08/16/PLSQL%E5%AE%89%E8%A3%85%E5%B9%B6%E4%B8%94%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E5%BA%93/"/>
    <id>http://wang_zhe343621.gitee.io/2022/08/16/PLSQL%E5%AE%89%E8%A3%85%E5%B9%B6%E4%B8%94%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E5%BA%93/</id>
    <published>2022-08-16T04:32:31.000Z</published>
    <updated>2023-04-02T18:51:29.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PLSQL-DEVELOPER15-下载安装"><a href="#PLSQL-DEVELOPER15-下载安装" class="headerlink" title="PLSQL_DEVELOPER15 下载安装"></a>PLSQL_DEVELOPER15 下载安装</h1><p><a href="https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html">下载链接</a></p><p><img src="/.io//image-20220816124115252.png" alt="image-20220816124115252"></p><p>需要安装图中的环境</p><h1 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h1><p><img src="/.io//image-20220816124920979.png" alt="image-20220816124920979"></p>]]></content>
    
    
    <summary type="html">PLSQL15安装并使用</summary>
    
    
    
    <category term="PLSQL" scheme="http://wang_zhe343621.gitee.io/categories/PLSQL/"/>
    
    
    <category term="PLSQL" scheme="http://wang_zhe343621.gitee.io/tags/PLSQL/"/>
    
  </entry>
  
  <entry>
    <title>StreamApi</title>
    <link href="http://wang_zhe343621.gitee.io/2022/05/27/StreamApi/"/>
    <id>http://wang_zhe343621.gitee.io/2022/05/27/StreamApi/</id>
    <published>2022-05-27T01:36:33.000Z</published>
    <updated>2023-04-02T18:51:30.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="map-flatMap"><a href="#map-flatMap" class="headerlink" title="map/flatMap"></a>map/flatMap</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map，它的作用就是把inputStream的每个元素映射成outputStream的另外一个元素</p><p>map生成的是个1:1映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; nums = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Integer&gt; squareNums = nums.stream().map(n -&gt; n * n).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>flatMap把inputStream中的层级结构 扁平化，就是将最底层元素抽出来放到一起，最终output的新Stream里面已经没有List了，都是直接的数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(</span><br><span class="line"> Arrays.asList(<span class="number">1</span>),</span><br><span class="line"> Arrays.asList(<span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line"> Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"> );</span><br><span class="line">Stream&lt;Integer&gt; outputStream = inputStream.</span><br><span class="line">flatMap((childList) -&gt; childList.stream());</span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>filter对原始Stream进行某项测试，通过测试的元素被留下来生成一个新Stream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 留下偶数</span></span><br><span class="line">Integer[] sixNums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">Integer[] evens =</span><br><span class="line">Stream.of(sixNums).filter(n -&gt; n%<span class="number">2</span> == <span class="number">0</span>).toArray(Integer[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>循环，terminal操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">umsAdmins.stream().filter(n -&gt; n.getStatus() == <span class="number">1</span>).forEach(n -&gt; System.out.println(n.getUsername()));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>forEach是terminal操作。因此，它执行后，Stream 的元素就被“消费”掉了，你无法对一个Stream进行两次terminal运算。下面的代码是错误的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stream.forEach(element -&gt; doOneThing(element));</span><br><span class="line">stream.forEach(element -&gt; doAnotherThing(element));</span><br></pre></td></tr></table></figure><h2 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h2><p>这是一个termimal兼short-circuiting操作，它总是返回Stream的第一个元素或者空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;UmsAdmin&gt; stream = umsAdmins.stream();</span><br><span class="line">Optional&lt;UmsAdmin&gt; first = stream.findFirst();</span><br><span class="line">UmsAdmin umsAdmin3 = first.get();</span><br><span class="line">System.out.println(umsAdmin3);</span><br><span class="line">String integer = Optional.ofNullable(umsAdmin3.getPassword()).map(n -&gt; n).orElse(String.valueOf(-<span class="number">1</span>));</span><br><span class="line">System.out.println(integer);</span><br></pre></td></tr></table></figure><p>findFirst 返回的是Optional</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://blog.csdn.net/justloveyou_/article/details/79562574">StreamApi 的背景及使用</a></p>]]></content>
    
    
    <summary type="html">StreamApi 使用记录</summary>
    
    
    
    <category term="Java" scheme="http://wang_zhe343621.gitee.io/categories/Java/"/>
    
    <category term="8" scheme="http://wang_zhe343621.gitee.io/categories/Java/8/"/>
    
    <category term="StreamApi" scheme="http://wang_zhe343621.gitee.io/categories/Java/8/StreamApi/"/>
    
    
    <category term="Java8新特性" scheme="http://wang_zhe343621.gitee.io/tags/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    <category term="StreamApi" scheme="http://wang_zhe343621.gitee.io/tags/StreamApi/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Swagger</title>
    <link href="http://wang_zhe343621.gitee.io/2022/05/18/SpringBoot%E6%95%B4%E5%90%88Swagger/"/>
    <id>http://wang_zhe343621.gitee.io/2022/05/18/SpringBoot%E6%95%B4%E5%90%88Swagger/</id>
    <published>2022-05-18T02:47:58.000Z</published>
    <updated>2023-04-02T18:51:29.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="swagger-简介"><a href="#swagger-简介" class="headerlink" title="swagger 简介"></a>swagger 简介</h1><h1 id="整合swagger"><a href="#整合swagger" class="headerlink" title="整合swagger"></a>整合swagger</h1><h2 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h2><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><h1 id="2-6-x-以上-整合出现的问题"><a href="#2-6-x-以上-整合出现的问题" class="headerlink" title="2.6.x 以上 整合出现的问题"></a>2.6.x 以上 整合出现的问题</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h1><p><a href="https://blog.csdn.net/qq_40205116/article/details/105200104?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165284373416781483781926%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165284373416781483781926&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105200104-null-null.142%5Ev10%5Econtrol,157%5Ev4%5Econtrol&utm_term=swagger2&spm=1018.2226.3001.4187">swagger2整合</a></p><p><a href="https://blog.csdn.net/weixin_43740223/article/details/108491386?spm=1001.2014.3001.5506">swagger3整合</a></p><p><a href="https://xingyun.blog.csdn.net/article/details/123753888?spm=1001.2014.3001.5506">springboot2.6x 兼容问题</a></p>]]></content>
    
    
    <summary type="html">SpringBoot整合Swagger</summary>
    
    
    
    <category term="SpringBoot" scheme="http://wang_zhe343621.gitee.io/categories/SpringBoot/"/>
    
    <category term="Swagger" scheme="http://wang_zhe343621.gitee.io/categories/SpringBoot/Swagger/"/>
    
    
    <category term="SpringBoot" scheme="http://wang_zhe343621.gitee.io/tags/SpringBoot/"/>
    
    <category term="Swagger" scheme="http://wang_zhe343621.gitee.io/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>springboot项目改端口,一直显示端口被占用</title>
    <link href="http://wang_zhe343621.gitee.io/2022/05/13/springboot%E9%A1%B9%E7%9B%AE%E6%94%B9%E7%AB%AF%E5%8F%A3-%E4%B8%80%E7%9B%B4%E6%98%BE%E7%A4%BA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
    <id>http://wang_zhe343621.gitee.io/2022/05/13/springboot%E9%A1%B9%E7%9B%AE%E6%94%B9%E7%AB%AF%E5%8F%A3-%E4%B8%80%E7%9B%B4%E6%98%BE%E7%A4%BA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/</id>
    <published>2022-05-13T02:28:27.000Z</published>
    <updated>2023-04-02T18:51:30.030Z</updated>
    
    <content type="html"><![CDATA[<p>springboot项目，无论修改什么端口，都显示端口被占用。</p><blockquote><p>错误原因</p></blockquote><p>java程序假死，需要在控制台需清理进程</p><p> <img src="/.io//image-20220513103147763.png" alt="image-20220513103147763"></p><p><strong><a href="https://blog.csdn.net/YangHongcxy/article/details/120783257?spm=1001.2014.3001.5506">原文链接</a></strong></p>]]></content>
    
    
    <summary type="html">springboot项目改端口,一直显示端口被占用</summary>
    
    
    
    <category term="采坑" scheme="http://wang_zhe343621.gitee.io/categories/%E9%87%87%E5%9D%91/"/>
    
    <category term="java" scheme="http://wang_zhe343621.gitee.io/categories/%E9%87%87%E5%9D%91/java/"/>
    
    
    <category term="错误" scheme="http://wang_zhe343621.gitee.io/tags/%E9%94%99%E8%AF%AF/"/>
    
    <category term="java" scheme="http://wang_zhe343621.gitee.io/tags/java/"/>
    
    <category term="error" scheme="http://wang_zhe343621.gitee.io/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-plus使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/04/15/mybatis-plus%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/04/15/mybatis-plus%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2022-04-15T02:23:12.000Z</published>
    <updated>2023-04-02T18:51:30.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot-整合mybatis-plus"><a href="#springboot-整合mybatis-plus" class="headerlink" title="springboot 整合mybatis-plus"></a>springboot 整合mybatis-plus</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>application.yaml配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">auto-mapping-behavior:</span> <span class="string">full</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/**/*Mapper.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="comment"># 逻辑删除配置</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 删除前</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 删除后</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">mybatis-plus使用记录</summary>
    
    
    
    <category term="mybatis-plus" scheme="http://wang_zhe343621.gitee.io/categories/mybatis-plus/"/>
    
    
    <category term="mybatis-plus" scheme="http://wang_zhe343621.gitee.io/tags/mybatis-plus/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity使用记录</title>
    <link href="http://wang_zhe343621.gitee.io/2022/04/14/SpringSecurity%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://wang_zhe343621.gitee.io/2022/04/14/SpringSecurity%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2022-04-14T03:09:49.000Z</published>
    <updated>2023-04-02T18:51:30.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>spring-security会自动添加一个登陆页面</strong></p><ul><li>用户 user</li><li>密码 会在控制台打印</li></ul><h1 id="springSecurity基本原理"><a href="#springSecurity基本原理" class="headerlink" title="springSecurity基本原理"></a>springSecurity基本原理</h1><p><strong>spring-security本质上是过滤器链</strong></p><p><strong>FilterSecurityInterceptor 是一个方法级的过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//过滤器体</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.invoke(<span class="keyword">new</span> FilterInvocation(request, response, chain));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//过滤器的执行体</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(FilterInvocation filterInvocation)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isApplied(filterInvocation) &amp;&amp; <span class="keyword">this</span>.observeOncePerRequest) &#123;</span><br><span class="line">        filterInvocation.getChain().doFilter(filterInvocation.getRequest(), filterInvocation.getResponse());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (filterInvocation.getRequest() != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.observeOncePerRequest) &#123;</span><br><span class="line">            filterInvocation.getRequest().setAttribute(<span class="string">&quot;__spring_security_filterSecurityInterceptor_filterApplied&quot;</span>, Boolean.TRUE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断之前过滤器的结果</span></span><br><span class="line">        InterceptorStatusToken token = <span class="keyword">super</span>.beforeInvocation(filterInvocation);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行当前过滤器</span></span><br><span class="line">            filterInvocation.getChain().doFilter(filterInvocation.getRequest(), filterInvocation.getResponse());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.finallyInvocation(token);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//执行下一个过滤器</span></span><br><span class="line">        <span class="keyword">super</span>.afterInvocation(token, (Object)<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ExceptionTranslationFilter异常转换过滤器</strong></p><p>处理权限认证过程种抛出的异常</p><p><strong>UsernamePasswordAuthenticationFilter 判断用户post请求种的用户名和密码</strong></p><p><img src="/.io//image-20220414120714351.png" alt="image-20220414120714351"></p><h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="不使用springboot配置security"><a href="#不使用springboot配置security" class="headerlink" title="不使用springboot配置security"></a>不使用springboot配置security</h2><p><strong>DelegatingFilterProxy</strong></p><h2 id="自定义用户名和密码匹配获取权限"><a href="#自定义用户名和密码匹配获取权限" class="headerlink" title="自定义用户名和密码匹配获取权限"></a>自定义用户名和密码匹配获取权限</h2><p><strong>获取用户数据</strong></p><ol><li><p>在配置文件中配置用户名和密码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure></li><li><p>通过配置类设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承 WebSecurityConfigurerAdapter</span></span><br><span class="line"><span class="comment">// 设置的密码必须加密，使用passwordEncoder相同的加密器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        BCryptPasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        String encode = passwordEncoder.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;wangzhe&quot;</span>)</span><br><span class="line">                .password(encode)</span><br><span class="line">                        .roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须设置加密器</span></span><br><span class="line">    <span class="comment">//exception：id null...</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>配置类设置的密码必须加密，必须设置passwordEncoder</strong></p><ol start="3"><li><p>通过数据库查找来获取用户名和密码，需要实现UserDetailService 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyUserDetailService myUserDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(myUserDetailService)</span><br><span class="line">                .passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;roles&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;xiaomi&quot;</span>, <span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>),authorities);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="自定义登录页面"><a href="#自定义登录页面" class="headerlink" title="自定义登录页面"></a>自定义登录页面</h2><pre><code>  登录页面必须以post请求，表单的name必须设置为username,password。  必须设置登录页面放行策略  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">// 登录页面</span></span><br><span class="line">                        .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>) <span class="comment">//表单登录按钮路径</span></span><br><span class="line">                                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>) <span class="comment">//登录成功的默认跳转路径</span></span><br><span class="line">                                        .and().authorizeHttpRequests()</span><br><span class="line">                        .antMatchers(<span class="string">&quot;/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/login.html&quot;</span>).permitAll() <span class="comment">//放行路径,需要添加登录页面到放行路径中</span></span><br><span class="line">                        .anyRequest().authenticated()</span><br><span class="line">                        .and().csrf().disable();<span class="comment">//关闭csrf 防护</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h2><pre><code>  &gt; 单权限  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       http.formLogin()</span><br><span class="line">               .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">// 登录页面</span></span><br><span class="line">                       .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>) <span class="comment">//表单登录按钮路径</span></span><br><span class="line">                               .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>) <span class="comment">//登录成功的默认跳转路径</span></span><br><span class="line">                                       .and().authorizeHttpRequests()</span><br><span class="line">                       .antMatchers(<span class="string">&quot;/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/login.html&quot;</span>).permitAll() <span class="comment">//放行路径,需要添加登录页面到放行路径中</span></span><br><span class="line">                       .antMatchers(<span class="string">&quot;/test/authority&quot;</span>).hasAuthority(<span class="string">&quot;admin&quot;</span>) <span class="comment">//添加权限校验</span></span><br><span class="line">                       .antMatchers(<span class="string">&quot;/test/authorities&quot;</span>).hasAnyAuthority(<span class="string">&quot;admin,girl&quot;</span>)</span><br><span class="line">                       .anyRequest().authenticated()</span><br><span class="line">                       .and().csrf().disable();<span class="comment">//关闭csrf 防护</span></span><br><span class="line">   &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure></code></pre><p>​      </p><pre><code>  &gt; 多权限  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/test/authorities&quot;</span>).hasAnyAuthority(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;girl&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><p>​      </p><pre><code>  **权限不足**  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Whitelabel Error Page</span><br><span class="line">This application has no explicit mapping for /error, so you are seeing this as a fallback.</span><br><span class="line"></span><br><span class="line">Fri Apr 15 16:07:39 CST 2022</span><br><span class="line">There was an unexpected error (type=Forbidden, status=403).</span><br><span class="line">Forbidden</span><br></pre></td></tr></table></figure></code></pre><p>​      </p><h2 id="用户角色分配"><a href="#用户角色分配" class="headerlink" title="用户角色分配"></a>用户角色分配</h2><pre><code>  &gt; 分配权限是 字符串需要在前面拼接 `ROLE_`  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单角色分配</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/test/authority&quot;</span>).hasRole(<span class="string">&quot;producer&quot;</span>)</span><br><span class="line">.antMatchers(<span class="string">&quot;/test/authorities&quot;</span>).hasAnyRole(<span class="string">&quot;producer&quot;</span>,<span class="string">&quot;consumer&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><p>​      </p><h2 id="自定义403-错误页面"><a href="#自定义403-错误页面" class="headerlink" title="自定义403 错误页面"></a>自定义403 错误页面</h2><blockquote><p> <strong>security配置类中添加</strong></p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br></pre></td></tr></table></figure><p>​      </p><h2 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h2><h3 id="Secured"><a href="#Secured" class="headerlink" title="@Secured"></a>@Secured</h3><p>指定访问目标 所需的 角色</p><p>注解可以被用在方法上，controller或者service层都可以</p><p><strong>开启注解使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在启动类或者是配置类上添加 启动注解</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>访问目标上添加<code>角色</code>校验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Secured(&#123;&quot;ROLE_admin&quot;, &quot;ROLE_manager&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getUserList() &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUserList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PreAuthorize"><a href="#PreAuthorize" class="headerlink" title="@PreAuthorize"></a>@PreAuthorize</h3><p>可以在进入方法前 进行校验</p><p><strong>开启注解支持</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br></pre></td></tr></table></figure><p><strong>在访问目标上添加<code>角色</code>or<code>权限</code>校验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;) and hasAnyRole(&#x27;ROLE_manager&#x27;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getById(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostAuthorize"><a href="#PostAuthorize" class="headerlink" title="@PostAuthorize"></a>@PostAuthorize</h3><p>在方法执行后校验</p><p><strong>开启注解支持</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true )</span></span><br></pre></td></tr></table></figure><p><strong>在访问目标上添加<code>角色</code>or<code>权限</code>校验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostAuthorize(&quot;hasAnyRole(&#x27;ROLE_manager&#x27;) and hasAnyAuthority(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getById(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostFilter"><a href="#PostFilter" class="headerlink" title="@PostFilter"></a>@PostFilter</h3><p>对方法的返回结果进行过滤</p><p><strong>在访问目标上添加结果过滤</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filterObject 是返回List中的单个对象，可以使用方法，或者是.属性 </span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Secured(&#123;&quot;ROLE_admin&quot;, &quot;ROLE_manager&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PostFilter(&quot;filterObject.get(&#x27;username&#x27;) == &#x27;admin&#x27;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getUserList() &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUserList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PreFilter"><a href="#PreFilter" class="headerlink" title="@PreFilter"></a>@PreFilter</h3><p>对方法的入参进行校验</p><h2 id="用户注销"><a href="#用户注销" class="headerlink" title="用户注销"></a>用户注销</h2><ol><li><p>security配置 <code>登出路径</code> 和 <code>登出成功页面</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="string">&quot;/logoutSuccess.html&quot;</span>);</span><br><span class="line">需要放行logoutSuccess.html页面，但是只能有一个permitALL</span><br></pre></td></tr></table></figure></li></ol><h2 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h2><ol><li><p>创建token-userinfo 表</p><p>建表语句在<code>org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl</code>类中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> persistent_logins (</span><br><span class="line">username <span class="type">VARCHAR</span> ( <span class="number">64</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">series <span class="type">VARCHAR</span> ( <span class="number">64</span> ) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">token <span class="type">VARCHAR</span> ( <span class="number">64</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">last_used <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>)</span><br></pre></td></tr></table></figure></li><li><p>配置数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置 PersistentTokenRepository 的数据源</span></span><br><span class="line"><span class="comment">//在配置类中添加</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JdbcTokenRepositoryImpl jdbcTokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">    jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>configure(HttpSecurity http)</code>中配置自动登录的数据库，token持续时间，userservice</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.and().rememberMe().tokenRepository(persistentTokenRepository())<span class="comment">//设置自动登录，数据库操作对象</span></span><br><span class="line">      .tokenValiditySeconds(<span class="number">60</span>) <span class="comment">//设置token的有效时间，单位秒</span></span><br><span class="line">      .userDetailsService(userDetailsService())</span><br></pre></td></tr></table></figure></li><li><p>在登录页面添加<strong>复选框：十天免登录</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span>&gt;</span> 5分钟之内免登录</span><br></pre></td></tr></table></figure></li><li><p>测试结果查看，客户端的cookie，数据库中的数据</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据库信息</span><br><span class="line">adminA1m2uLrSTC3CRQ9IRzyIgQ==Ieotk5N33+/5I6MNODR3gQ==2022-05-13 09:44:44</span><br></pre></td></tr></table></figure><p><strong>客户端cookie信息</strong></p><p><img src="/.io//image-20220513095136449.png" alt="image-20220513095136449"></p></li></ol><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="CSRF简介"><a href="#CSRF简介" class="headerlink" title="CSRF简介"></a>CSRF简介</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  CSRF(Cross-site request forgery)跨站请求伪造，也被称为&quot;One Click Attack&quot;或者Session Riding，通常缩写为CSRF或者</span><br><span class="line">XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本(XSS)，但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装成受信</span><br><span class="line">任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行(因此对其进行防范的资源也相当稀少)和难以防范，所以被认为比</span><br><span class="line">XSS更具危险性。</span><br></pre></td></tr></table></figure><p><strong>SpringSecurity 4之后</strong></p><p>默认开启CSRF保护，会针对POST,PUT,PATCH,DELETE这些请求进行保护。</p><p>开启后，只能在同站进行访问，跨站是不能访问的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭CSRF</span></span><br><span class="line">http.csrf().disable();<span class="comment">//关闭csrf 防护</span></span><br></pre></td></tr></table></figure><p><strong>csrf的实现在过滤器中</strong></p><p><code>org.springframework.security.web.csrf.CsrfFilter</code>springSecurity 中的csrf功能时在这个过滤器中</p><h2 id="开启csrf校验"><a href="#开启csrf校验" class="headerlink" title="开启csrf校验"></a>开启csrf校验</h2><ol><li>在配置类中开启CSRF校验</li><li>需要在请求的时候传递_csrf的token</li></ol><h1 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h1><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="登录成功后的行为"><a href="#登录成功后的行为" class="headerlink" title="登录成功后的行为"></a>登录成功后的行为</h2><ol><li>defaultSuccessUrl,successForwardUrl</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin().defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>,<span class="keyword">true</span>).successForwardUrl(<span class="string">&quot;/index&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>http.successHandler(AuthenticationSuccessHandler successHandler)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">http.successHandler(AuthenticationSuccessHandler successHandler);</span><br><span class="line"><span class="comment">//配置</span></span><br><span class="line">.successHandler(<span class="keyword">new</span> authenticationSuccessHandler());</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">authenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">            Object principal = authentication.getPrincipal();</span><br><span class="line">            PrintWriter writer = response.getWriter();</span><br><span class="line">            writer.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(principal));</span><br><span class="line">            writer.flush();</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//Lamda写法</span></span><br><span class="line">.successHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">    Object principal = authentication.getPrincipal();</span><br><span class="line">    resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line">    out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(principal));</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="登录失败后的行为"><a href="#登录失败后的行为" class="headerlink" title="登录失败后的行为"></a>登录失败后的行为</h2><ol><li>```java<br>.failureUrl(“/failure”) //跳转登录失败页面<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```java</span><br><span class="line">   //登录失败，处理方法，前后端分离时使用</span><br><span class="line">   .failureHandler((req, resp, e) -&gt; &#123;</span><br><span class="line">       resp.setContentType(&quot;application/json;charset=utf-8&quot;);</span><br><span class="line">       PrintWriter out = resp.getWriter();</span><br><span class="line">       out.write(e.getMessage());</span><br><span class="line">       out.flush();</span><br><span class="line">       out.close();</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="未认证时访问其他页面是的行为"><a href="#未认证时访问其他页面是的行为" class="headerlink" title="未认证时访问其他页面是的行为"></a>未认证时访问其他页面是的行为</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里主要是针对，前后端分离的情况，后台没有办法重定向。 </span></span><br><span class="line">http.exceptionHandling().authenticationEntryPoint((req,resp,authException) -&gt; &#123;</span><br><span class="line">            resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            PrintWriter writer = resp.getWriter();</span><br><span class="line">            writer.write(<span class="string">&quot;尚未登录，清闲登录&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="注销登录后返回json数据"><a href="#注销登录后返回json数据" class="headerlink" title="注销登录后返回json数据"></a>注销登录后返回json数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http.logout()   .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">                .logoutSuccessUrl(<span class="string">&quot;/logoutSuccess&quot;</span>)</span><br><span class="line">                .logoutSuccessHandler((req,resp,auth) -&gt; &#123;</span><br><span class="line">                    Object principal = auth.getPrincipal();</span><br><span class="line">                    resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                    PrintWriter writer = resp.getWriter();</span><br><span class="line">                    writer.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(principal));</span><br><span class="line">                    writer.write(<span class="string">&quot;登出成功&quot;</span>);</span><br><span class="line">                    writer.flush();</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><h2 id="配置用户的方式"><a href="#配置用户的方式" class="headerlink" title="配置用户的方式"></a>配置用户的方式</h2><ol><li><p>配置在内存中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    auth.inMemoryAuthentication()</span><br><span class="line">        .withUser(<span class="string">&quot;aoa&quot;</span>)</span><br><span class="line">        .password(passwordEncoder()</span><br><span class="line">        .encode(<span class="string">&quot;123&quot;</span>))</span><br><span class="line">        .roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置UserDetailsService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 重写方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在这里创建</span></span><br><span class="line">        InMemoryUserDetailsManager inMemoryUserDetailsManager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        inMemoryUserDetailsManager.createUser(User.withUsername(<span class="string">&quot;bin&quot;</span>).password(passwordEncoder().encode(<span class="string">&quot;123&quot;</span>)).roles(<span class="string">&quot;bin&quot;</span>).build());</span><br><span class="line">        inMemoryUserDetailsManager.createUser(User.withUsername(<span class="string">&quot;sofm&quot;</span>).password(passwordEncoder().encode(<span class="string">&quot;123&quot;</span>)).roles(<span class="string">&quot;sofm&quot;</span>).build());</span><br><span class="line">        <span class="keyword">return</span> inMemoryUserDetailsManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 在configure(auth)中配置</span></span><br><span class="line"> auth.userDetailsService((userName)-&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="权限继承"><a href="#权限继承" class="headerlink" title="权限继承"></a>权限继承</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新版本可能配置的字符串中使用 \n 分割   </span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RoleHierarchy <span class="title">roleHierarchy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RoleHierarchyImpl hierarchy = <span class="keyword">new</span> RoleHierarchyImpl();</span><br><span class="line">        hierarchy.setHierarchy(<span class="string">&quot;ROLE_admin &gt; ROLE_bin&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hierarchy;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SpringSecurity使用记录</summary>
    
    
    
    <category term="SpringSecurity" scheme="http://wang_zhe343621.gitee.io/categories/SpringSecurity/"/>
    
    
    <category term="SpringSecurity" scheme="http://wang_zhe343621.gitee.io/tags/SpringSecurity/"/>
    
  </entry>
  
</feed>
